From 8f29ef98fb6e079790d3f79e2b5d37d270451530 Mon Sep 17 00:00:00 2001
From: stoozy <stoozy@proton.me>
Date: Wed, 4 Jan 2023 00:58:25 -0500
Subject: [PATCH] Atlas changes

---
 meson.build                                  |   7 +-
 sysdeps/atlas/crt-x86_64/crt0.S              |   7 +
 sysdeps/atlas/generic/entry.cpp              |  34 +
 sysdeps/atlas/generic/generic.cpp            | 755 +++++++++++++++++++
 sysdeps/atlas/generic/thread.cpp             |  44 ++
 sysdeps/atlas/generic/thread_entry.S         |   9 +
 sysdeps/atlas/include/abi-bits/access.h      |   9 +
 sysdeps/atlas/include/abi-bits/auxv.h        |  13 +
 sysdeps/atlas/include/abi-bits/blkcnt_t.h    |   8 +
 sysdeps/atlas/include/abi-bits/blksize_t.h   |   8 +
 sysdeps/atlas/include/abi-bits/clockid_t.h   |   7 +
 sysdeps/atlas/include/abi-bits/dev_t.h       |  10 +
 sysdeps/atlas/include/abi-bits/epoll.h       |   6 +
 sysdeps/atlas/include/abi-bits/errno.h       | 139 ++++
 sysdeps/atlas/include/abi-bits/fcntl.h       |  74 ++
 sysdeps/atlas/include/abi-bits/fsblkcnt_t.h  |   8 +
 sysdeps/atlas/include/abi-bits/fsfilcnt_t.h  |   8 +
 sysdeps/atlas/include/abi-bits/gid_t.h       |   8 +
 sysdeps/atlas/include/abi-bits/in.h          | 162 ++++
 sysdeps/atlas/include/abi-bits/ino_t.h       |  10 +
 sysdeps/atlas/include/abi-bits/inotify.h     |   9 +
 sysdeps/atlas/include/abi-bits/ioctls.h      |  11 +
 sysdeps/atlas/include/abi-bits/limits.h      |   9 +
 sysdeps/atlas/include/abi-bits/mode_t.h      |   8 +
 sysdeps/atlas/include/abi-bits/mqueue.h      |  21 +
 sysdeps/atlas/include/abi-bits/nlink_t.h     |   8 +
 sysdeps/atlas/include/abi-bits/packet.h      |   6 +
 sysdeps/atlas/include/abi-bits/pid_t.h       |   8 +
 sysdeps/atlas/include/abi-bits/poll.h        |  15 +
 sysdeps/atlas/include/abi-bits/ptrace.h      |  59 ++
 sysdeps/atlas/include/abi-bits/reboot.h      |  12 +
 sysdeps/atlas/include/abi-bits/resource.h    |  25 +
 sysdeps/atlas/include/abi-bits/seek-whence.h |   8 +
 sysdeps/atlas/include/abi-bits/shm.h         |  21 +
 sysdeps/atlas/include/abi-bits/signal.h      | 441 +++++++++++
 sysdeps/atlas/include/abi-bits/socket.h      | 298 ++++++++
 sysdeps/atlas/include/abi-bits/socklen_t.h   |   6 +
 sysdeps/atlas/include/abi-bits/stat.h        |  94 +++
 sysdeps/atlas/include/abi-bits/statfs.h      |  28 +
 sysdeps/atlas/include/abi-bits/statvfs.h     |  28 +
 sysdeps/atlas/include/abi-bits/suseconds_t.h |   8 +
 sysdeps/atlas/include/abi-bits/termios.h     | 117 +++
 sysdeps/atlas/include/abi-bits/time.h        |  15 +
 sysdeps/atlas/include/abi-bits/uid_t.h       |   8 +
 sysdeps/atlas/include/abi-bits/utsname.h     |  13 +
 sysdeps/atlas/include/abi-bits/vm-flags.h    |  44 ++
 sysdeps/atlas/include/abi-bits/vt.h          |  76 ++
 sysdeps/atlas/include/abi-bits/wait.h        |  28 +
 sysdeps/atlas/include/abi-bits/xattr.h       |  21 +
 sysdeps/atlas/include/header_list            |  43 ++
 sysdeps/atlas/include/header_list2           |  30 +
 sysdeps/atlas/include/mlibc/thread-entry.hpp |  10 +
 sysdeps/atlas/include/syscall.h              | 110 +++
 sysdeps/atlas/include/vfs.h                  |  28 +
 sysdeps/atlas/meson.build                    |  72 ++
 55 files changed, 3063 insertions(+), 1 deletion(-)
 create mode 100644 sysdeps/atlas/crt-x86_64/crt0.S
 create mode 100644 sysdeps/atlas/generic/entry.cpp
 create mode 100644 sysdeps/atlas/generic/generic.cpp
 create mode 100644 sysdeps/atlas/generic/thread.cpp
 create mode 100644 sysdeps/atlas/generic/thread_entry.S
 create mode 100644 sysdeps/atlas/include/abi-bits/access.h
 create mode 100644 sysdeps/atlas/include/abi-bits/auxv.h
 create mode 100644 sysdeps/atlas/include/abi-bits/blkcnt_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/blksize_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/clockid_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/dev_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/epoll.h
 create mode 100644 sysdeps/atlas/include/abi-bits/errno.h
 create mode 100644 sysdeps/atlas/include/abi-bits/fcntl.h
 create mode 100644 sysdeps/atlas/include/abi-bits/fsblkcnt_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/fsfilcnt_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/gid_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/in.h
 create mode 100644 sysdeps/atlas/include/abi-bits/ino_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/inotify.h
 create mode 100644 sysdeps/atlas/include/abi-bits/ioctls.h
 create mode 100644 sysdeps/atlas/include/abi-bits/limits.h
 create mode 100644 sysdeps/atlas/include/abi-bits/mode_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/mqueue.h
 create mode 100644 sysdeps/atlas/include/abi-bits/nlink_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/packet.h
 create mode 100644 sysdeps/atlas/include/abi-bits/pid_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/poll.h
 create mode 100644 sysdeps/atlas/include/abi-bits/ptrace.h
 create mode 100644 sysdeps/atlas/include/abi-bits/reboot.h
 create mode 100644 sysdeps/atlas/include/abi-bits/resource.h
 create mode 100644 sysdeps/atlas/include/abi-bits/seek-whence.h
 create mode 100644 sysdeps/atlas/include/abi-bits/shm.h
 create mode 100644 sysdeps/atlas/include/abi-bits/signal.h
 create mode 100644 sysdeps/atlas/include/abi-bits/socket.h
 create mode 100644 sysdeps/atlas/include/abi-bits/socklen_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/stat.h
 create mode 100644 sysdeps/atlas/include/abi-bits/statfs.h
 create mode 100644 sysdeps/atlas/include/abi-bits/statvfs.h
 create mode 100644 sysdeps/atlas/include/abi-bits/suseconds_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/termios.h
 create mode 100644 sysdeps/atlas/include/abi-bits/time.h
 create mode 100644 sysdeps/atlas/include/abi-bits/uid_t.h
 create mode 100644 sysdeps/atlas/include/abi-bits/utsname.h
 create mode 100644 sysdeps/atlas/include/abi-bits/vm-flags.h
 create mode 100644 sysdeps/atlas/include/abi-bits/vt.h
 create mode 100644 sysdeps/atlas/include/abi-bits/wait.h
 create mode 100644 sysdeps/atlas/include/abi-bits/xattr.h
 create mode 100644 sysdeps/atlas/include/header_list
 create mode 100644 sysdeps/atlas/include/header_list2
 create mode 100644 sysdeps/atlas/include/mlibc/thread-entry.hpp
 create mode 100644 sysdeps/atlas/include/syscall.h
 create mode 100644 sysdeps/atlas/include/vfs.h
 create mode 100644 sysdeps/atlas/meson.build

diff --git a/meson.build b/meson.build
index a8cd3fec..ac709084 100644
--- a/meson.build
+++ b/meson.build
@@ -144,6 +144,11 @@ elif host_machine.system() == 'dripos'
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'atlas'
+	rtdl_include_dirs += include_directories('sysdeps/atlas/include')
+	libc_include_dirs += include_directories('sysdeps/atlas/include')
+	subdir('sysdeps/atlas')
+
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
@@ -316,7 +321,7 @@ if not headers_only
 
 	ld_cpp_args = [
 		'-fvisibility=hidden',
-		'-fno-stack-protector',
+        '-fno-stack-protector',
 		'-DMLIBC_BUILDING_RTDL'
 	]
 
diff --git a/sysdeps/atlas/crt-x86_64/crt0.S b/sysdeps/atlas/crt-x86_64/crt0.S
new file mode 100644
index 00000000..0a0a4a0c
--- /dev/null
+++ b/sysdeps/atlas/crt-x86_64/crt0.S
@@ -0,0 +1,7 @@
+
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+
diff --git a/sysdeps/atlas/generic/entry.cpp b/sysdeps/atlas/generic/entry.cpp
new file mode 100644
index 00000000..ee7a794b
--- /dev/null
+++ b/sysdeps/atlas/generic/entry.cpp
@@ -0,0 +1,34 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
+
diff --git a/sysdeps/atlas/generic/generic.cpp b/sysdeps/atlas/generic/generic.cpp
new file mode 100644
index 00000000..0cd24b7f
--- /dev/null
+++ b/sysdeps/atlas/generic/generic.cpp
@@ -0,0 +1,755 @@
+#include <abi-bits/vt.h>
+#include <bits/ensure.h>
+#include <dirent.h>
+#include <errno.h>
+#include <limits.h>
+#include <linux/fb.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+#include <mlibc/thread-entry.hpp>
+#include <string.h>
+#include <sys/types.h>
+#include <syscall.h>
+#include <unistd.h>
+#include <vfs.h>
+
+namespace mlibc {
+
+void sys_libc_log(const char *message) {
+
+    sysc_ret ret;
+    SYSCALL_NA1(SYS_LOG_LIBC, message);
+
+    return;
+}
+
+void sys_libc_panic() {
+    mlibc::infoLogger() << "\e[31mmlibc: panic!" << frg::endlog;
+    for (;;)
+        ;
+}
+
+int sys_tcb_set(void *pointer) {
+    sysc_ret ret;
+    SYSCALL_NA1(SYS_TCB_SET, pointer);
+
+    mlibc::infoLogger() << "Got tcb_set return " << ret.ret << frg::endlog;
+    return ret.ret;
+}
+
+int sys_anon_allocate(size_t size, void **pointer) {
+
+    int errno = sys_vm_map(NULL, size, PROT_EXEC | PROT_READ | PROT_WRITE,
+                           MAP_ANONYMOUS, -1, 0, pointer);
+
+    return errno;
+}
+
+int sys_anon_free(void *pointer, size_t size) {
+    // TODO
+    return 0;
+}
+
+#ifndef MLIBC_BUILDING_RTDL
+void sys_exit(int status) {
+    sysc_ret ret;
+    SYSCALL_NA1(SYS_EXIT, status);
+}
+#endif
+
+#ifndef MLIBC_BUILDING_RTDL
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_clock_get() STUB\n"
+                        << frg::endlog;
+    return 0;
+}
+#endif
+
+int sys_open(const char *path, int flags, unsigned int mode, int *fd) {
+    mlibc::infoLogger() << "[mlibc] Called sys_open on " << path << frg::endlog;
+    mlibc::infoLogger() << "[mlibc] path len is " << strlen(path)
+                        << frg::endlog;
+    // if(path[0] == '\0' ||  path == NULL || strlen(path) == 0 || strlen(path)
+    // == 1) return EINVAL;
+
+    sysc_ret ret;
+    SYSCALL_NA2(SYS_OPEN, path, flags);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    *fd = ret.ret;
+
+    return 0;
+}
+
+int sys_open_dir(const char *path, int *handle) {
+
+    mlibc::infoLogger() << "[mlibc] sys_open_dir; path: " << path << "\n"
+                        << frg::endlog;
+    return sys_open(path, O_DIRECTORY | O_RDONLY, 0, handle);
+}
+
+int sys_read_entries(int handle, void *buffer, size_t max_size,
+                     size_t *bytes_read) {
+    __ensure(max_size >= sizeof(dirent));
+
+    mlibc::infoLogger() << "[mlibc] sys_read_entries STUB; handle: " << handle
+                        << "\n"
+                        << frg::endlog;
+
+    return ENOSYS;
+
+    sysc_ret ret;
+    SYSCALL_NA3(SYS_READDIR, handle, buffer, max_size);
+
+    dirent ret_entry;
+    DirectoryEntry *entry = (DirectoryEntry *)(buffer);
+
+    if (ret.ret == -1) {
+        *bytes_read = 0;
+        return 0;
+    }
+
+    ret_entry.d_ino = entry->ino;
+    ret_entry.d_off = 0;
+    ret_entry.d_reclen = sizeof(DirectoryEntry);
+    memcpy(ret_entry.d_name, entry->name, 128);
+
+    mlibc::infoLogger() << "Got entry " << entry->name << "\n" << frg::endlog;
+    switch (entry->type) {
+    case VFS_DIRECTORY:
+        ret_entry.d_type = DT_DIR;
+        mlibc::infoLogger() << "Type is DIR"
+                            << "\n"
+                            << frg::endlog;
+        break;
+    case VFS_FILE:
+        ret_entry.d_type = DT_REG;
+        mlibc::infoLogger() << "Type is FILE"
+                            << "\n"
+                            << frg::endlog;
+        break;
+    default:
+        ret_entry.d_type = DT_UNKNOWN;
+        mlibc::infoLogger() << "Type is UNKNOWN"
+                            << "\n"
+                            << frg::endlog;
+        break;
+    }
+
+    memcpy(buffer, &ret_entry, sizeof(dirent));
+    *bytes_read = ret_entry.d_reclen;
+    // for(;;);
+
+    return 0;
+}
+
+int sys_close(int fd) {
+    mlibc::infoLogger() << "[mlibc] Close was called on " << fd << "\n"
+                        << frg::endlog;
+
+    return 0;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+
+    mlibc::infoLogger() << "[mlibc] SYS_READ read called" << fd << " bytes";
+
+    sysc_ret ret;
+    SYSCALL_NA3(SYS_READ, fd, buf, count);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    *bytes_read = ret.ret;
+    mlibc::infoLogger() << "[mlibc] SYS_READ read " << *bytes_read << " bytes"
+                        << frg::endlog;
+
+    return 0;
+}
+
+#ifndef MLIBC_BUILDING_RTDL
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+
+    mlibc::infoLogger() << "[mlibc] Write was called on " << fd << "\n"
+                        << frg::endlog;
+    sysc_ret ret;
+    SYSCALL_NA3(SYS_WRITE, fd, buf, count);
+
+    if (ret.ret == -1)
+        return ret.errno;
+    *bytes_written = ret.ret;
+
+    return 0;
+}
+#endif
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+    // TODO
+
+    if (fd == 0 || fd == 1 || fd == 2)
+        return ESPIPE;
+
+    sysc_ret ret;
+    SYSCALL_NA3(SYS_SEEK, fd, offset, whence);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    *new_offset = ret.ret;
+
+    mlibc::infoLogger() << "[mlibc] Sys seek got ret " << *new_offset << "\n"
+                        << frg::endlog;
+
+    return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
+             struct stat *statbuf) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_stat() STUB\n" << frg::endlog;
+
+    VfsNodeStat vns;
+    switch (fsfdt) {
+    case fsfd_target::fd: {
+        mlibc::infoLogger() << "[mlibc] Calling fstat on " << fd << " fd\n"
+                            << frg::endlog;
+
+        sysc_ret ret;
+        SYSCALL_NA2(SYS_FSTAT, fd, &vns);
+
+        if (ret.ret == -1)
+            return ret.errno;
+
+        break;
+    }
+    case fsfd_target::path: {
+        mlibc::infoLogger() << "[mlibc] Calling stat on " << path << "\n"
+                            << frg::endlog;
+
+        sysc_ret ret;
+        SYSCALL_NA2(SYS_STAT, path, &vns);
+        if (ret.ret == -1)
+            return ret.errno;
+
+        break;
+    }
+    default: {
+        mlibc::infoLogger() << "Invalid fsfd_target \n" << frg::endlog;
+
+        return EBADF;
+        break;
+    }
+    }
+
+    memset(statbuf, 0, sizeof(struct stat));
+
+    statbuf->st_ino = (vns.inode % 15);
+    statbuf->st_size = vns.filesize;
+    statbuf->st_dev = 0;
+    statbuf->st_nlink = 1;
+    statbuf->st_uid = 0;
+    statbuf->st_gid = 0;
+    statbuf->st_rdev = 0;
+    statbuf->st_blksize = 0;
+    statbuf->st_blocks = 0;
+    statbuf->st_mode = 0;
+
+    switch (vns.type) {
+    case VFS_FILE:
+        mlibc::infoLogger() << "[mlibc] Regular file " << path << "\n"
+                            << frg::endlog;
+        statbuf->st_mode |= S_IFREG;
+        break;
+
+    case VFS_DIRECTORY | VFS_MOUNTPOINT:
+    case VFS_DIRECTORY:
+        mlibc::infoLogger() << "[mlibc] Regular directory " << path << "\n"
+                            << frg::endlog;
+        statbuf->st_mode |= S_IFDIR;
+        break;
+    case VFS_CHARDEVICE:
+
+        mlibc::infoLogger() << "[mlibc] Chardevice " << path << "\n"
+                            << frg::endlog;
+        statbuf->st_mode |= S_IFCHR;
+        statbuf->st_rdev = 0;
+        break;
+    default:
+        sys_libc_panic();
+    }
+
+    mlibc::infoLogger() << "[mlibc] size: " << statbuf->st_size
+                        << " inode: " << statbuf->st_ino << "\n"
+                        << frg::endlog;
+
+    return 0;
+}
+
+int sys_access(const char *filename, int mode) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_access() STUB\n" << frg::endlog;
+    for (;;)
+        ;
+    return ENOSYS;
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd,
+               off_t offset, void **window) {
+    if (flags & MAP_SHARED) {
+        mlibc::infoLogger() << "[mlibc] Trying to map shared size: " << size
+                            << " address: " << hint << " fd: " << fd << "\n"
+                            << frg::endlog;
+
+        sysc_ret ret;
+        SYSCALL_NA6(SYS_VM_MAP, hint, size, prot, flags, fd, offset);
+
+        mlibc::infoLogger() << "[mlibc] Derefing window at " << window << "\n"
+                            << frg::endlog;
+
+        if (ret.ret == -1)
+            return ret.errno;
+
+        *window = (void *)ret.ret;
+        return 0;
+    }
+
+    __ensure(flags & MAP_ANONYMOUS);
+
+    sysc_ret ret;
+    SYSCALL_NA6(SYS_VM_MAP, hint, size, prot, flags, fd, offset);
+
+    mlibc::infoLogger() << "[mlibc] Derefing window at " << window << "\n"
+                        << frg::endlog;
+    if (ret.ret == -1)
+        return ret.errno;
+
+    *window = (void *)ret.ret;
+
+    return 0;
+}
+
+int sys_vm_unmap(void *pointer, size_t size) {
+    // TODO
+    return sys_anon_free(pointer, size);
+}
+
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_futex_wait() STUB\n"
+                        << frg::endlog;
+
+    return 0;
+}
+
+int sys_isatty(int fd) {
+    mlibc::infoLogger() << "[mlibc] Called sys_isatty on fd " << fd << "\n"
+                        << frg::endlog;
+    return 0;
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+
+    mlibc::infoLogger() << "[mlibc] Called sys_ioctl() STUB; fd: " << fd << "\n"
+                        << frg::endlog;
+    // return ENOSYS;
+
+    switch (request) {
+    case TIOCGWINSZ: {
+
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCGWINSZ\n" << frg::endlog;
+        *result = 1920 / 8 * 1080 / 16;
+        return 0;
+        break;
+    }
+    case TIOCSWINSZ: {
+
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCSWINSZ\n" << frg::endlog;
+        *result = 1920 / 8 * 1080 / 16;
+
+        return 0;
+        break;
+    }
+    case TIOCGPGRP: {
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCGPGRP\n" << frg::endlog;
+
+        *result = 0;
+        return 0;
+        break;
+    }
+    case TIOCSPGRP: {
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCSPGRP\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+    case TIOCSPTLCK: {
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCSPTLCK\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+    case TIOCGPTN: {
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCGPTN\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+    case TIOCSCTTY: {
+        mlibc::infoLogger() << "[mlibc] REQ: TIOCSCTTY\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+    case VT_RELDISP: {
+        mlibc::infoLogger() << "[mlibc] REQ: VT_RELDISP\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+    case VT_SETMODE: {
+        mlibc::infoLogger() << "[mlibc] REQ: VT_SETMODE\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+    case FBIOPUTCMAP: {
+        mlibc::infoLogger() << "[mlibc] REQ: FBIOPUTCMAP\n" << frg::endlog;
+        *result = 0;
+        break;
+    }
+
+    case FBIOGETCMAP: {
+        mlibc::infoLogger() << "[mlibc] REQ: FBIOGETCMAP\n" << frg::endlog;
+
+        fb_cmap cmap;
+
+        fb_cmap *buffer = (fb_cmap *)arg;
+        buffer->start = 0;
+        buffer->len = 4;
+        buffer->red[0] = (unsigned short)~(0x0);
+        buffer->green[0] = (unsigned short)~(0x0);
+        buffer->blue[0] = (unsigned short)~(0x0);
+        buffer->transp[0] = (unsigned short)~(0x0);
+
+        *buffer = cmap;
+
+        *result = 0;
+        break;
+    }
+    case FBIOGET_FSCREENINFO: {
+        mlibc::infoLogger() << "[mlibc] REQ: FBIOGET_FSCREENINFO\n"
+                            << frg::endlog;
+
+        fb_fix_screeninfo info;
+
+        info.visual = FB_VISUAL_TRUECOLOR;
+        info.smem_len = 1280 * 800 * 4;
+        info.smem_start = 0xFFFF8000FD000000;
+
+        fb_fix_screeninfo *buffer = (fb_fix_screeninfo *)arg;
+        *buffer = info;
+
+        *result = 0;
+        break;
+    }
+    case FBIOGET_VSCREENINFO: {
+        mlibc::infoLogger() << "[mlibc] REQ: FBIOGET_VSCREENINFO\n"
+                            << frg::endlog;
+        *result = 0;
+        break;
+    }
+    default: {
+        for (;;)
+            mlibc::infoLogger() << "[mlibc] Unsupported ioctl request \n"
+                                << frg::endlog;
+        *result = -1;
+        return ENOSYS;
+        break;
+    }
+    }
+
+    return 0;
+}
+
+int sys_futex_wake(int *pointer) {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_futex_wake() STUB\n"
+                        << frg::endlog;
+    return 0;
+}
+
+// All remaining functions are disabled in ldso.
+#ifndef MLIBC_BUILDING_RTDL
+
+int sys_clone(void *entry, void *user_arg, void *tcb, pid_t *tid_out) {
+    // void *sp = prepare_stack(entry, user_arg, tcb);
+    // int tid;
+
+    // asm volatile("syscall"
+    //              : "=a"(tid)
+    //              : "a"(67), "D"(__mlibc_start_thread), "S"(sp), "d"(tcb)
+    //              : "rcx", "r11");
+
+    // if (tid_out)
+    //   *tid_out = tid;
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_clone() STUB\n" << frg::endlog;
+
+    return 0;
+}
+
+void sys_thread_exit() {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_thread_exit() STUB\n"
+                        << frg::endlog;
+
+    // asm volatile("syscall" : : "a"(68) : "rcx", "r11");
+    //__builtin_trap();
+}
+
+int sys_sleep(time_t *secs, long *nanos) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_sleep() STUB\n" << frg::endlog;
+    return 0;
+}
+
+int sys_fork(pid_t *child) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_fork() \n" << frg::endlog;
+
+    sysc_ret ret;
+    SYSCALL_NA0(SYS_FORK);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    mlibc::infoLogger() << "[mlibc] sys_fork(): derefing " << child << "\n"
+                        << frg::endlog;
+    *child = ret.ret;
+
+    return 0;
+}
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_execve() STUB\n" << frg::endlog;
+    for (;;)
+        ;
+    return 0;
+}
+
+uid_t sys_getuid() {
+    mlibc::infoLogger() << "[mlibc] Calling sys_getuid() STUB\n" << frg::endlog;
+    return 1000;
+}
+
+gid_t sys_getgid() {
+    mlibc::infoLogger() << "[mlibc] Calling sys_getgid() STUB\n" << frg::endlog;
+    return 1000;
+}
+
+uid_t sys_geteuid() {
+    mlibc::infoLogger() << "[mlibc] Calling sys_geteuid() STUB\n"
+                        << frg::endlog;
+    return 1000;
+}
+
+gid_t sys_getegid() {
+    mlibc::infoLogger() << "[mlibc] Calling sys_getegid() STUB\n"
+                        << frg::endlog;
+    return 1000;
+}
+
+pid_t sys_getpid() {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_getpid() \n" << frg::endlog;
+
+    sysc_ret ret;
+    SYSCALL_NA0(SYS_GETPID);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    mlibc::infoLogger() << "[mlibc] Got pid: " << ret.ret << frg::endlog;
+
+    return ret.ret;
+}
+
+int sys_getpgid(pid_t pid, pid_t *pgid) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_getpgid() STUB\n"
+                        << frg::endlog;
+    *pgid = 0;
+    return 0;
+}
+
+int sys_setpgid(pid_t pid, pid_t pgid) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_setpgid() STUB\n"
+                        << frg::endlog;
+    return ENOSYS;
+}
+
+pid_t sys_getppid() {
+    mlibc::infoLogger() << "[mlibc] Calling sys_getppid() STUB\n"
+                        << frg::endlog;
+    return ENOSYS;
+}
+
+int sys_dup(int fd, int flags, int *newfd) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_dup() \n" << frg::endlog;
+
+    sysc_ret ret;
+    SYSCALL_NA2(SYS_DUP, fd, flags);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    *newfd = ret.ret;
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_dup() \n" << frg::endlog;
+
+    return 0;
+}
+
+int sys_dup2(int fd, int flags, int newfd) {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_dup2() \n" << frg::endlog;
+    sysc_ret ret;
+    SYSCALL_NA3(SYS_DUP2, fd, flags, newfd);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    mlibc::infoLogger() << "[mlibc] sys_dup2(): success \n" << frg::endlog;
+
+    return 0;
+}
+
+int sys_waitpid(pid_t pid, int *status, int flags, struct rusage *ru,
+                pid_t *ret_pid) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_waitpid() STUB\n"
+                        << frg::endlog;
+
+    sysc_ret ret;
+    SYSCALL_NA3(SYS_WAIT, pid, status, flags);
+
+    if (ret.ret == -1)
+        return ret.errno;
+
+    *ret_pid = ret.ret;
+
+    return 0;
+}
+
+int sys_getcwd(char *buffer, size_t size) {
+    if (size < 2)
+        return EINVAL;
+    mlibc::infoLogger() << "[mlibc]  getcwd called buffer size" << size
+                        << frg::endlog;
+    buffer[0] = '/';
+    buffer[1] = '\0';
+    return 0;
+}
+
+int sys_sigaction(int signum, const struct sigaction *act,
+                  struct sigaction *oldact) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_sigaction() STUB; Signal:"
+                        << signum << " \n"
+                        << frg::endlog;
+
+    return ENOSYS;
+
+    switch (signum) {
+    case SIGCHLD: {
+        mlibc::infoLogger() << "[mlibc] SIGCHLD"
+                            << " \n"
+                            << frg::endlog;
+        *oldact = *act;
+        break;
+    }
+    case SIGUSR1: {
+        mlibc::infoLogger() << "[mlibc] SIGUSR1"
+                            << " \n"
+                            << frg::endlog;
+        *oldact = *act;
+        break;
+    }
+    case SIGUSR2: {
+        mlibc::infoLogger() << "[mlibc] SIGUSR2"
+                            << " \n"
+                            << frg::endlog;
+        *oldact = *act;
+        break;
+    }
+    default:
+        break;
+    }
+
+    return 0;
+}
+
+int sys_pipe(int *fds, int flags) {
+    mlibc::infoLogger() << "[mlibc] Calling sys_pipe() STUB\n" << frg::endlog;
+    return 0;
+}
+
+int sys_fcntl(int fd, int request, va_list args, int *result_value) {
+
+    mlibc::infoLogger() << "[mlibc] Calling sys_fcntl() on " << fd << "\n"
+                        << frg::endlog;
+    switch (request) {
+    case F_DUPFD:
+        mlibc::infoLogger() << "[mlibc] REQ: F_DUPFD "
+                            << "\n"
+                            << frg::endlog;
+        return sys_dup(fd, 0, result_value);
+        break;
+    case F_DUPFD_CLOEXEC:
+        mlibc::infoLogger() << "[mlibc] REQ: F_DUPFD_CLOEXEC "
+                            << "\n"
+                            << frg::endlog;
+        break;
+    case F_SETFD:
+        mlibc::infoLogger() << "[mlibc] REQ: F_SETFD " << fd << "\n"
+                            << frg::endlog;
+
+        if (fd < 255) {
+            mlibc::infoLogger()
+                << "[mlibc] Calling sys_fcntl() on " << fd << "\n"
+                << frg::endlog;
+            *result_value = 0;
+            return fd;
+        } else {
+            mlibc::infoLogger() << "[mlibc] Returning EBADF"
+                                << "\n"
+                                << frg::endlog;
+            return EBADF;
+        }
+        break;
+    case F_GETFD:
+        mlibc::infoLogger() << "[mlibc] REQ: F_GETFD "
+                            << "\n"
+                            << frg::endlog;
+        break;
+
+    case F_SETFL:
+        mlibc::infoLogger() << "[mlibc] REQ: F_SETFL "
+                            << "\n"
+                            << frg::endlog;
+        break;
+    case F_GETFL:
+        mlibc::infoLogger() << "[mlibc] REQ: F_GETFL "
+                            << "\n"
+                            << frg::endlog;
+        break;
+    default:
+        sys_libc_panic();
+    }
+
+    return ENOSYS;
+}
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+    if (bufsize < 0)
+        return EINVAL;
+
+    for (size_t i = 0; i < bufsize; i++)
+        buffer[i] = "root"[i];
+
+    return 0;
+}
+
+#endif // MLIBC_BUILDING_RTDL
+
+} // namespace mlibc
diff --git a/sysdeps/atlas/generic/thread.cpp b/sysdeps/atlas/generic/thread.cpp
new file mode 100644
index 00000000..35e7a9be
--- /dev/null
+++ b/sysdeps/atlas/generic/thread.cpp
@@ -0,0 +1,44 @@
+#include <mlibc/thread-entry.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/tcb.hpp>
+#include <bits/ensure.h>
+#include <sys/mman.h>
+#include <stdint.h>
+#include <stddef.h>
+
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb) {
+	// Wait until our parent sets up the TID.
+	while(!__atomic_load_n(&tcb->tid, __ATOMIC_RELAXED))
+		mlibc::sys_futex_wait(&tcb->tid, 0, nullptr);
+
+	if(mlibc::sys_tcb_set(tcb))
+		__ensure(!"sys_tcb_set() failed");
+
+	void *(*func)(void *) = reinterpret_cast<void *(*)(void *)>(entry);
+	auto result = func(user_arg);
+
+	auto self = reinterpret_cast<Tcb *>(tcb);
+
+	self->returnValue = result;
+	__atomic_store_n(&self->didExit, 1, __ATOMIC_RELEASE);
+	mlibc::sys_futex_wake(&self->didExit);
+
+	mlibc::sys_thread_exit();
+}
+
+namespace mlibc {
+
+void *prepare_stack(void *entry, void *user_arg, void *tcb) {
+	uintptr_t *sp = reinterpret_cast<uintptr_t *>(reinterpret_cast<uintptr_t>(
+			mmap(nullptr, 0x200000,
+				PROT_READ | PROT_WRITE,
+				MAP_PRIVATE | MAP_ANONYMOUS, -1, 0)
+			) + 0x200000);
+
+	*--sp = reinterpret_cast<uintptr_t>(tcb);
+	*--sp = reinterpret_cast<uintptr_t>(user_arg);
+	*--sp = reinterpret_cast<uintptr_t>(entry);
+	return sp;
+}
+
+} //namespace mlibc
diff --git a/sysdeps/atlas/generic/thread_entry.S b/sysdeps/atlas/generic/thread_entry.S
new file mode 100644
index 00000000..ac321e6f
--- /dev/null
+++ b/sysdeps/atlas/generic/thread_entry.S
@@ -0,0 +1,9 @@
+
+.section .text
+.global __mlibc_start_thread
+__mlibc_start_thread:
+	pop %rdi
+	pop %rsi
+	pop %rdx
+	call __mlibc_enter_thread
+
diff --git a/sysdeps/atlas/include/abi-bits/access.h b/sysdeps/atlas/include/abi-bits/access.h
new file mode 100644
index 00000000..f76ca620
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/access.h
@@ -0,0 +1,9 @@
+#ifndef _ABIBITS_ACCESS_H
+#define _ABIBITS_ACCESS_H
+
+#define F_OK 0
+#define X_OK 1
+#define W_OK 2
+#define R_OK 4
+
+#endif // _ABIBITS_ACCESS_H
diff --git a/sysdeps/atlas/include/abi-bits/auxv.h b/sysdeps/atlas/include/abi-bits/auxv.h
new file mode 100644
index 00000000..8eb80491
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/auxv.h
@@ -0,0 +1,13 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_PLATFORM 15
+#define AT_HWCAP 16
+#define AT_CLKTCK 17
+#define AT_FPUCW 18
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+#define AT_SYSINFO_EHDR 33
+
+#endif // _ABIBITS_AUXV_H
diff --git a/sysdeps/atlas/include/abi-bits/blkcnt_t.h b/sysdeps/atlas/include/abi-bits/blkcnt_t.h
new file mode 100644
index 00000000..c4b45051
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/blkcnt_t.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_BLKCNT_T_H
+#define _ABIBITS_BLKCNT_T_H
+
+#include <bits/types.h>
+
+typedef __mlibc_int64 blkcnt_t;
+
+#endif // _ABIBITS_BLKCNT_T_H
diff --git a/sysdeps/atlas/include/abi-bits/blksize_t.h b/sysdeps/atlas/include/abi-bits/blksize_t.h
new file mode 100644
index 00000000..afabadb8
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/blksize_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_BLKSIZE_T_H
+#define _ABIBITS_BLKSIZE_T_H
+
+typedef long blksize_t;
+
+#endif // _ABIBITS_BLKSIZE_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/clockid_t.h b/sysdeps/atlas/include/abi-bits/clockid_t.h
new file mode 100644
index 00000000..8d928268
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/clockid_t.h
@@ -0,0 +1,7 @@
+#ifndef _ABIBITS_CLOCKID_T_H
+#define _ABIBITS_CLOCKID_T_H
+
+typedef int clockid_t;
+
+#endif /* _ABIBITS_CLOCKID_T_H */
+
diff --git a/sysdeps/atlas/include/abi-bits/dev_t.h b/sysdeps/atlas/include/abi-bits/dev_t.h
new file mode 100644
index 00000000..839a4457
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/dev_t.h
@@ -0,0 +1,10 @@
+
+#ifndef _ABIBITS_DEV_T_H
+#define _ABIBITS_DEV_T_H
+
+#include <bits/types.h>
+
+typedef __mlibc_uint64 dev_t;
+
+#endif // _ABIBITS_DEV_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/epoll.h b/sysdeps/atlas/include/abi-bits/epoll.h
new file mode 100644
index 00000000..0b984b64
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/epoll.h
@@ -0,0 +1,6 @@
+#ifndef _ABIBITS_EPOLL_H
+#define _ABIBITS_EPOLL_H
+
+#define EPOLL_CLOEXEC 02000000 // Same as __MLIBC_O_CLOEXEC
+
+#endif // _ABIBITS_EPOLL_H
diff --git a/sysdeps/atlas/include/abi-bits/errno.h b/sysdeps/atlas/include/abi-bits/errno.h
new file mode 100644
index 00000000..54fe80ad
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/errno.h
@@ -0,0 +1,139 @@
+#ifndef _ABIBITS_ERRNO_H
+#define _ABIBITS_ERRNO_H
+
+#define EPERM            1
+#define ENOENT           2
+#define ESRCH            3
+#define EINTR            4
+#define EIO              5
+#define ENXIO            6
+#define E2BIG            7
+#define ENOEXEC          8
+#define EBADF            9
+#define ECHILD          10
+#define EAGAIN          11
+#define ENOMEM          12
+#define EACCES          13
+#define EFAULT          14
+#define ENOTBLK         15
+#define EBUSY           16
+#define EEXIST          17
+#define EXDEV           18
+#define ENODEV          19
+#define ENOTDIR         20
+#define EISDIR          21
+#define EINVAL          22
+#define ENFILE          23
+#define EMFILE          24
+#define ENOTTY          25
+#define ETXTBSY         26
+#define EFBIG           27
+#define ENOSPC          28
+#define ESPIPE          29
+#define EROFS           30
+#define EMLINK          31
+#define EPIPE           32
+#define EDOM            33
+#define ERANGE          34
+#define EDEADLK         35
+#define ENAMETOOLONG    36
+#define ENOLCK          37
+#define ENOSYS          38
+#define ENOTEMPTY       39
+#define ELOOP           40
+#define EWOULDBLOCK     EAGAIN
+#define ENOMSG          42
+#define EIDRM           43
+#define ECHRNG          44
+#define EL2NSYNC        45
+#define EL3HLT          46
+#define EL3RST          47
+#define ELNRNG          48
+#define EUNATCH         49
+#define ENOCSI          50
+#define EL2HLT          51
+#define EBADE           52
+#define EBADR           53
+#define EXFULL          54
+#define ENOANO          55
+#define EBADRQC         56
+#define EBADSLT         57
+#define EDEADLOCK       EDEADLK
+#define EBFONT          59
+#define ENOSTR          60
+#define ENODATA         61
+#define ETIME           62
+#define ENOSR           63
+#define ENONET          64
+#define ENOPKG          65
+#define EREMOTE         66
+#define ENOLINK         67
+#define EADV            68
+#define ESRMNT          69
+#define ECOMM           70
+#define EPROTO          71
+#define EMULTIHOP       72
+#define EDOTDOT         73
+#define EBADMSG         74
+#define EOVERFLOW       75
+#define ENOTUNIQ        76
+#define EBADFD          77
+#define EREMCHG         78
+#define ELIBACC         79
+#define ELIBBAD         80
+#define ELIBSCN         81
+#define ELIBMAX         82
+#define ELIBEXEC        83
+#define EILSEQ          84
+#define ERESTART        85
+#define ESTRPIPE        86
+#define EUSERS          87
+#define ENOTSOCK        88
+#define EDESTADDRREQ    89
+#define EMSGSIZE        90
+#define EPROTOTYPE      91
+#define ENOPROTOOPT     92
+#define EPROTONOSUPPORT 93
+#define ESOCKTNOSUPPORT 94
+#define EOPNOTSUPP      95
+#define ENOTSUP         EOPNOTSUPP
+#define EPFNOSUPPORT    96
+#define EAFNOSUPPORT    97
+#define EADDRINUSE      98
+#define EADDRNOTAVAIL   99
+#define ENETDOWN        100
+#define ENETUNREACH     101
+#define ENETRESET       102
+#define ECONNABORTED    103
+#define ECONNRESET      104
+#define ENOBUFS         105
+#define EISCONN         106
+#define ENOTCONN        107
+#define ESHUTDOWN       108
+#define ETOOMANYREFS    109
+#define ETIMEDOUT       110
+#define ECONNREFUSED    111
+#define EHOSTDOWN       112
+#define EHOSTUNREACH    113
+#define EALREADY        114
+#define EINPROGRESS     115
+#define ESTALE          116
+#define EUCLEAN         117
+#define ENOTNAM         118
+#define ENAVAIL         119
+#define EISNAM          120
+#define EREMOTEIO       121
+#define EDQUOT          122
+#define ENOMEDIUM       123
+#define EMEDIUMTYPE     124
+#define ECANCELED       125
+#define ENOKEY          126
+#define EKEYEXPIRED     127
+#define EKEYREVOKED     128
+#define EKEYREJECTED    129
+#define EOWNERDEAD      130
+#define ENOTRECOVERABLE 131
+#define ERFKILL         132
+#define EHWPOISON       133
+
+#endif // _ABIBITS_ERRNO_H
diff --git a/sysdeps/atlas/include/abi-bits/fcntl.h b/sysdeps/atlas/include/abi-bits/fcntl.h
new file mode 100644
index 00000000..822790b4
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/fcntl.h
@@ -0,0 +1,74 @@
+#ifndef _ABIBITS_FCNTL_H
+#define _ABIBITS_FCNTL_H
+
+#define O_PATH 010000000
+
+#define O_ACCMODE (03 | O_PATH)
+#define O_RDONLY   00
+#define O_WRONLY   01
+#define O_RDWR     02
+
+#define O_CREAT         0100
+#define O_EXCL          0200
+#define O_NOCTTY        0400
+#define O_TRUNC        01000
+#define O_APPEND       02000
+#define O_NONBLOCK     04000
+#define O_DSYNC       010000
+#define O_ASYNC       020000
+#define O_DIRECT      040000
+#define O_DIRECTORY  0200000
+#define O_NOFOLLOW   0400000
+#define O_CLOEXEC   02000000
+#define O_SYNC      04010000
+#define O_RSYNC     04010000
+#define O_LARGEFILE  0100000
+#define O_NOATIME   01000000
+#define O_TMPFILE  020000000
+
+#define O_EXEC O_PATH
+#define O_SEARCH O_PATH
+
+#define F_DUPFD  0
+#define F_GETFD  1
+#define F_SETFD  2
+#define F_GETFL  3
+#define F_SETFL  4
+
+#define F_SETOWN 8
+#define F_GETOWN 9
+#define F_SETSIG 10
+#define F_GETSIG 11
+
+#define F_GETLK 5
+#define F_SETLK 6
+#define F_SETLKW 7
+
+#define F_SETOWN_EX 15
+#define F_GETOWN_EX 16
+
+#define F_GETOWNER_UIDS 17
+
+#define F_DUPFD_CLOEXEC 1030
+#define F_ADD_SEALS 1033
+#define F_GET_SEALS 1034
+
+#define F_SEAL_SEAL 0x0001
+#define F_SEAL_SHRINK 0x0002
+#define F_SEAL_GROW 0x0004
+#define F_SEAL_WRITE 0x0008
+
+#define F_RDLCK 0
+#define F_WRLCK 1
+#define F_UNLCK 2
+
+#define FD_CLOEXEC 1
+
+#define AT_FDCWD -100
+#define AT_SYMLINK_NOFOLLOW 0x100
+#define AT_REMOVEDIR 0x200
+#define AT_SYMLINK_FOLLOW 0x400
+#define AT_EACCESS 0x200
+#define AT_EMPTY_PATH 0x1000
+
+#endif // _ABIBITS_FCNTL_H
diff --git a/sysdeps/atlas/include/abi-bits/fsblkcnt_t.h b/sysdeps/atlas/include/abi-bits/fsblkcnt_t.h
new file mode 100644
index 00000000..0d744561
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_FSBLKCNT_T_H
+#define _ABIBITS_FSBLKCNT_T_H
+
+#include <bits/types.h>
+
+typedef __mlibc_uint64 fsblkcnt_t;
+
+#endif /* _ABIBITS_FSBLKCNT_T_H */
diff --git a/sysdeps/atlas/include/abi-bits/fsfilcnt_t.h b/sysdeps/atlas/include/abi-bits/fsfilcnt_t.h
new file mode 100644
index 00000000..1abda9a9
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_FSFILCNT_T_H
+#define _ABIBITS_FSFILCNT_T_H
+
+#include <bits/types.h>
+
+typedef __mlibc_uint64 fsfilcnt_t;
+
+#endif /* _ABIBITS_FSFILCNT_T_H */
diff --git a/sysdeps/atlas/include/abi-bits/gid_t.h b/sysdeps/atlas/include/abi-bits/gid_t.h
new file mode 100644
index 00000000..62ac1930
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/gid_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_GID_T_H
+#define _ABIBITS_GID_T_H
+
+typedef int gid_t;
+
+#endif // _ABIBITS_GID_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/in.h b/sysdeps/atlas/include/abi-bits/in.h
new file mode 100644
index 00000000..bb5b6ef6
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/in.h
@@ -0,0 +1,162 @@
+#ifndef _ABIBITS_IN_H
+#define _ABIBITS_IN_H
+
+#include <bits/posix/in_addr_t.h>
+#include <bits/posix/in_port_t.h>
+#include <abi-bits/socket.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct in_addr {
+	in_addr_t s_addr;
+};
+
+struct sockaddr_in {
+	sa_family_t sin_family;
+	in_port_t sin_port;
+	struct in_addr sin_addr;
+	uint8_t sin_zero[8];
+};
+
+struct in6_addr {
+	union {
+		uint8_t __s6_addr[16];
+		uint16_t __s6_addr16[8];
+		uint32_t __s6_addr32[4];
+	} __in6_union;
+};
+#define s6_addr __in6_union.__s6_addr
+#define s6_addr16 __in6_union.__s6_addr16
+#define s6_addr32 __in6_union.__s6_addr32
+
+struct sockaddr_in6 {
+	sa_family_t     sin6_family;
+	in_port_t       sin6_port;
+	uint32_t        sin6_flowinfo;
+	struct in6_addr sin6_addr;
+	uint32_t        sin6_scope_id;
+};
+
+struct ip_mreq {
+	struct in_addr imr_multiaddr;
+	struct in_addr imr_interface;
+};
+
+struct ipv6_mreq {
+	struct in6_addr ipv6mr_multiaddr;
+	unsigned        ipv6mr_interface;
+};
+
+struct in_pktinfo {
+	unsigned int ipi_ifindex;
+	struct in_addr ipi_spec_dst;
+	struct in_addr ipi_addr;
+};
+
+struct in6_pktinfo {
+	struct in6_addr ipi6_addr;
+	uint32_t ipi6_ifindex;
+};
+
+struct group_req {
+	uint32_t gr_interface;
+	struct sockaddr_storage gr_group;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#define INADDR_ANY        ((in_addr_t) 0x00000000)
+#define INADDR_BROADCAST  ((in_addr_t) 0xffffffff)
+#define INADDR_NONE       ((in_addr_t) 0xffffffff)
+#define INADDR_LOOPBACK   ((in_addr_t) 0x7f000001)
+
+#define INADDR_UNSPEC_GROUP     ((in_addr_t) 0xe0000000)
+#define INADDR_ALLHOSTS_GROUP   ((in_addr_t) 0xe0000001)
+#define INADDR_ALLRTRS_GROUP    ((in_addr_t) 0xe0000002)
+#define INADDR_ALLSNOOPERS_GROUP ((in_addr_t) 0xe000006a)
+#define INADDR_MAX_LOCAL_GROUP  ((in_addr_t) 0xe00000ff)
+
+#define IN6ADDR_ANY_INIT      { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }
+#define IN6ADDR_LOOPBACK_INIT { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }
+
+#define INET_ADDRSTRLEN  16
+#define INET6_ADDRSTRLEN 46
+
+#define IPPORT_RESERVED 1024
+
+#define IPPROTO_IP       0
+#define IPPROTO_HOPOPTS  0
+#define IPPROTO_ICMP     1
+#define IPPROTO_IGMP     2
+#define IPPROTO_IPIP     4
+#define IPPROTO_TCP      6
+#define IPPROTO_EGP      8
+#define IPPROTO_PUP      12
+#define IPPROTO_UDP      17
+#define IPPROTO_IDP      22
+#define IPPROTO_TP       29
+#define IPPROTO_DCCP     33
+#define IPPROTO_IPV6     41
+#define IPPROTO_ROUTING  43
+#define IPPROTO_FRAGMENT 44
+#define IPPROTO_RSVP     46
+#define IPPROTO_GRE      47
+#define IPPROTO_ESP      50
+#define IPPROTO_AH       51
+#define IPPROTO_ICMPV6   58
+#define IPPROTO_NONE     59
+#define IPPROTO_DSTOPTS  60
+#define IPPROTO_MTP      92
+#define IPPROTO_BEETPH   94
+#define IPPROTO_ENCAP    98
+#define IPPROTO_PIM      103
+#define IPPROTO_COMP     108
+#define IPPROTO_SCTP     132
+#define IPPROTO_MH       135
+#define IPPROTO_UDPLITE  136
+#define IPPROTO_MPLS     137
+#define IPPROTO_RAW      255
+#define IPPROTO_MAX      256
+
+#define IP_TOS 1
+#define IP_TTL 2
+#define IP_PKTINFO 8
+#define IP_MULTICAST_IF 32
+#define IP_MULTICAST_TTL 33
+#define IP_MULTICAST_LOOP 34
+#define IP_ADD_MEMBERSHIP 35
+#define IP_DROP_MEMBERSHIP 36
+
+#define IPV6_UNICAST_HOPS 16
+#define IPV6_MULTICAST_IF 17
+#define IPV6_MULTICAST_HOPS 18
+#define IPV6_MULTICAST_LOOP 19
+#define IPV6_JOIN_GROUP 20
+#define IPV6_LEAVE_GROUP 21
+#define IPV6_V6ONLY 26
+#define IPV6_RECVPKTINFO 49
+#define IPV6_PKTINFO 50
+#define IPV6_RECVHOPLIMIT 51
+#define IPV6_HOPLIMIT 52
+
+/* These defines are needed for compatibility with Linux kernel headers. */
+#define __UAPI_DEF_IN_ADDR      0
+#define __UAPI_DEF_IN_IPPROTO   0
+#define __UAPI_DEF_IN_PKTINFO   0
+#define __UAPI_DEF_IP_MREQ      0
+#define __UAPI_DEF_SOCKADDR_IN  0
+#define __UAPI_DEF_IN_CLASS     0
+#define __UAPI_DEF_IN6_ADDR     0
+#define __UAPI_DEF_IN6_ADDR_ALT 0
+#define __UAPI_DEF_SOCKADDR_IN6 0
+#define __UAPI_DEF_IPV6_MREQ    0
+#define __UAPI_DEF_IPPROTO_V6   0
+#define __UAPI_DEF_IPV6_OPTIONS 0
+#define __UAPI_DEF_IN6_PKTINFO  0
+#define __UAPI_DEF_IP6_MTUINFO  0
+
+#endif // _ABITBITS_IN_H
diff --git a/sysdeps/atlas/include/abi-bits/ino_t.h b/sysdeps/atlas/include/abi-bits/ino_t.h
new file mode 100644
index 00000000..ba076f40
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/ino_t.h
@@ -0,0 +1,10 @@
+
+#ifndef _ABIBITS_INO_T_H
+#define _ABIBITS_INO_T_H
+
+#include <bits/types.h>
+
+typedef __mlibc_uint64 ino_t;
+
+#endif // _ABIBITS_INO_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/inotify.h b/sysdeps/atlas/include/abi-bits/inotify.h
new file mode 100644
index 00000000..4a0bd4cb
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/inotify.h
@@ -0,0 +1,9 @@
+#ifndef _ABIBITS_INOTIFY_H
+#define _ABIBITS_INOTIFY_H
+
+#include <abi-bits/fcntl.h>
+
+#define IN_CLOEXEC O_CLOEXEC
+#define IN_NONBLOCK O_NONBLOCK
+
+#endif // _ABIBITS_INOTIFY_H
diff --git a/sysdeps/atlas/include/abi-bits/ioctls.h b/sysdeps/atlas/include/abi-bits/ioctls.h
new file mode 100644
index 00000000..e2961842
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/ioctls.h
@@ -0,0 +1,11 @@
+#ifndef _ABIBITS_IOCTLS_H
+#define _ABIBITS_IOCTLS_H
+
+#define SIOCPROTOPRIVATE 0x89E0
+#define SIOCGIFNAME 0x8910
+#define SIOCGIFCONF 0x8912
+#define SIOCGIFFLAGS 0x8913
+#define SIOCSIFFLAGS 0x8914
+#define SIOCGIFINDEX 0x8933
+
+#endif /* _ABIBITS_IOCTLS_H */
diff --git a/sysdeps/atlas/include/abi-bits/limits.h b/sysdeps/atlas/include/abi-bits/limits.h
new file mode 100644
index 00000000..091b14ba
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/limits.h
@@ -0,0 +1,9 @@
+#ifndef _ABIBITS_LIMITS_H
+#define _ABIBITS_LIMITS_H
+
+#define IOV_MAX 1024
+#define LOGIN_NAME_MAX 256
+#define NAME_MAX 255
+#define OPEN_MAX 256
+
+#endif //_ABIBITS_LIMITS_H
diff --git a/sysdeps/atlas/include/abi-bits/mode_t.h b/sysdeps/atlas/include/abi-bits/mode_t.h
new file mode 100644
index 00000000..8374c125
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/mode_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_MODE_T_H
+#define _ABIBITS_MODE_T_H
+
+typedef unsigned int mode_t;
+
+#endif // _ABIBITS_MODE_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/mqueue.h b/sysdeps/atlas/include/abi-bits/mqueue.h
new file mode 100644
index 00000000..1e2d3eb8
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/mqueue.h
@@ -0,0 +1,21 @@
+#ifndef _ABIBITS_MQUEUE_H
+#define _ABIBITS_MQUEUE_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct mq_attr {
+	long mq_flags;
+	long mq_maxmsg;
+	long mq_msgsize;
+	long mq_curmsgs;
+	long __pad[4];
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _ABIBITS_MQUEUE_H */
+
diff --git a/sysdeps/atlas/include/abi-bits/nlink_t.h b/sysdeps/atlas/include/abi-bits/nlink_t.h
new file mode 100644
index 00000000..e0d9322d
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/nlink_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_NLINK_T_H
+#define _ABIBITS_NLINK_T_H
+
+typedef unsigned long nlink_t;
+
+#endif // _ABIBITS_NLINK_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/packet.h b/sysdeps/atlas/include/abi-bits/packet.h
new file mode 100644
index 00000000..ee1a424f
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/packet.h
@@ -0,0 +1,6 @@
+#ifndef _ABIBITS_PACKET_H
+#define _ABIBITS_PACKET_H
+
+#define PACKET_HOST 0
+
+#endif // _ABIBITS_PACKET_H
diff --git a/sysdeps/atlas/include/abi-bits/pid_t.h b/sysdeps/atlas/include/abi-bits/pid_t.h
new file mode 100644
index 00000000..323168e6
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/pid_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_PID_T_H
+#define _ABIBITS_PID_T_H
+
+typedef int pid_t;
+
+#endif // _ABIBITS_PID_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/poll.h b/sysdeps/atlas/include/abi-bits/poll.h
new file mode 100644
index 00000000..86311a76
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/poll.h
@@ -0,0 +1,15 @@
+#ifndef _ABIBITS_POLL_H
+#define _ABIBITS_POLL_H
+
+#define POLLIN 0x0001
+#define POLLPRI 0x0002
+#define POLLOUT 0x0004
+#define POLLERR 0x0008
+#define POLLHUP 0x0010
+#define POLLNVAL 0x0020
+#define POLLRDNORM 0x0040
+#define POLLRDBAND 0x0080
+#define POLLWRNORM 0x0100
+#define POLLRDHUP 0x2000
+
+#endif // _ABIBITS_POLL_H
diff --git a/sysdeps/atlas/include/abi-bits/ptrace.h b/sysdeps/atlas/include/abi-bits/ptrace.h
new file mode 100644
index 00000000..3d73aa17
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/ptrace.h
@@ -0,0 +1,59 @@
+#ifndef _ABIBITS_PTRACE_H
+#define _ABIBITS_PTRACE_H
+
+#define PTRACE_PEEKTEXT 1
+#define PTRACE_PEEKDATA 2
+#define PTRACE_PEEKUSER 3
+#define PTRACE_POKETEXT 4
+#define PTRACE_POKEDATA 5
+#define PTRACE_POKEUSER 6
+#define PTRACE_CONT 7
+#define PTRACE_KILL 8
+#define PTRACE_SINGLESTEP 9
+#define PTRACE_GETREGS 12
+#define PTRACE_SETREGS 13
+#define PTRACE_GETFPREGS 14
+#define PTRACE_SETFPREGS 15
+#define PTRACE_ATTACH 16
+#define PTRACE_DETACH 17
+#define PTRACE_GETFPXREGS 18
+#define PTRACE_SETFPXREGS 19
+#define PTRACE_SYSCALL 24
+#define PTRACE_SETOPTIONS 0x4200
+#define PTRACE_GETEVENTMSG 0x4201
+#define PTRACE_GETSIGINFO 0x4202
+#define PTRACE_SETSIGINFO 0x4203
+#define PTRACE_GETREGSET 0x4204
+#define PTRACE_SETREGSET 0x4205
+#define PTRACE_SEIZE 0x4206
+#define PTRACE_INTERRUPT 0x4207
+#define PTRACE_LISTEN 0x4208
+#define PTRACE_PEEKSIGINFO 0x4209
+#define PTRACE_GETSIGMASK 0x420A
+#define PTRACE_SETSIGMASK 0x420B
+#define PTRACE_SECCOMP_GET_FILTER 0x420C
+
+#define PTRACE_O_TRACESYSGOOD 0x00000001
+#define PTRACE_O_TRACEFORK 0x00000002
+#define PTRACE_O_TRACEVFORK 0x00000004
+#define PTRACE_O_TRACECLONE 0x00000008
+#define PTRACE_O_TRACEEXEC 0x00000010
+#define PTRACE_O_TRACEVFORKDONE 0x00000020
+#define PTRACE_O_TRACEEXIT 0x00000040
+#define PTRACE_O_TRACESECCOMP 0x00000080
+#define PTRACE_O_EXITKILL 0x00100000
+#define PTRACE_O_SUSPEND_SECCOMP 0x00200000
+#define PTRACE_O_MASK 0x003000ff
+
+#define PTRACE_EVENT_FORK 1
+#define PTRACE_EVENT_VFORK 2
+#define PTRACE_EVENT_CLONE 3
+#define PTRACE_EVENT_EXEC 4
+#define PTRACE_EVENT_VFORK_DONE 5
+#define PTRACE_EVENT_EXIT 6
+#define PTRACE_EVENT_SECCOMP 7
+#define PTRACE_EVENT_STOP 128
+
+#define PTRACE_PEEKSIGINFO_SHARED 1
+
+#endif // _ABIBITS_PTRACE_H
diff --git a/sysdeps/atlas/include/abi-bits/reboot.h b/sysdeps/atlas/include/abi-bits/reboot.h
new file mode 100644
index 00000000..aadc18f2
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/reboot.h
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_REBOOT_H
+#define _ABIBITS_REBOOT_H
+
+#define RB_AUTOBOOT 0x01234567
+#define RB_HALT_SYSTEM 0xcdef0123
+#define RB_ENABLE_CAD 0x89abcdef
+#define RB_DISABLE_CAD 0
+#define RB_POWER_OFF 0x4321fedc
+#define RB_SW_SUSPEND 0xd000fce2
+#define RB_KEXEC 0x45584543
+
+#endif // _ABIBITS_REBOOT_H
diff --git a/sysdeps/atlas/include/abi-bits/resource.h b/sysdeps/atlas/include/abi-bits/resource.h
new file mode 100644
index 00000000..c035b3d7
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/resource.h
@@ -0,0 +1,25 @@
+#ifndef _ABIBITS_RESOURCE_H
+#define _ABIBITS_RESOURCE_H
+
+#include <bits/posix/timeval.h>
+
+struct rusage {
+	struct timeval ru_utime;
+	struct timeval ru_stime;
+	long ru_maxrss;
+	long ru_ixrss;
+	long ru_idrss;
+	long ru_isrss;
+	long ru_minflt;
+	long ru_majflt;
+	long ru_nswap;
+	long ru_inblock;
+	long ru_oublock;
+	long ru_msgsnd;
+	long ru_msgrcv;
+	long ru_nsignals;
+	long ru_nvcsw;
+	long ru_nivcsw;
+};
+
+#endif // _ABIBITS_RESOURCE_H
diff --git a/sysdeps/atlas/include/abi-bits/seek-whence.h b/sysdeps/atlas/include/abi-bits/seek-whence.h
new file mode 100644
index 00000000..bbd8675c
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/seek-whence.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_SEEK_WHENCE_H
+#define _ABIBITS_SEEK_WHENCE_H
+
+#define SEEK_SET 0
+#define SEEK_CUR 1
+#define SEEK_END 2
+
+#endif // _ABIBITS_SEEK_WHENCE_H
diff --git a/sysdeps/atlas/include/abi-bits/shm.h b/sysdeps/atlas/include/abi-bits/shm.h
new file mode 100644
index 00000000..93fb01bb
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/shm.h
@@ -0,0 +1,21 @@
+#ifndef _ABIBITS_SHM_H
+#define _ABIBITS_SHM_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct shm_info {
+	int used_ids;
+	unsigned long shm_tot;
+	unsigned long shm_rss;
+	unsigned long shm_swp;
+	unsigned long swap_attempts;
+	unsigned long swap_successes;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _ABIBITS_SHM_H */
diff --git a/sysdeps/atlas/include/abi-bits/signal.h b/sysdeps/atlas/include/abi-bits/signal.h
new file mode 100644
index 00000000..ded12e7d
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/signal.h
@@ -0,0 +1,441 @@
+#ifndef _ABIBITS_SIGNAL_H
+#define _ABIBITS_SIGNAL_H
+
+#include <stdint.h>
+#include <time.h>
+#include <abi-bits/pid_t.h>
+#include <abi-bits/uid_t.h>
+#include <bits/size_t.h>
+
+union sigval {
+	int sival_int;
+	void *sival_ptr;
+};
+
+// struct taken from musl.
+
+typedef struct {
+	int si_signo, si_errno, si_code;
+	union {
+		char __pad[128 - 2*sizeof(int) - sizeof(long)];
+		struct {
+			union {
+				struct {
+					pid_t si_pid;
+					uid_t si_uid;
+				} __piduid;
+				struct {
+					int si_timerid;
+					int si_overrun;
+				} __timer;
+			} __first;
+			union {
+				union sigval si_value;
+				struct {
+					int si_status;
+					clock_t si_utime, si_stime;
+				} __sigchld;
+			} __second;
+		} __si_common;
+		struct {
+			void *si_addr;
+			short si_addr_lsb;
+			union {
+				struct {
+					void *si_lower;
+					void *si_upper;
+				} __addr_bnd;
+				unsigned si_pkey;
+			} __first;
+		} __sigfault;
+		struct {
+			long si_band;
+			int si_fd;
+		} __sigpoll;
+		struct {
+			void *si_call_addr;
+			int si_syscall;
+			unsigned si_arch;
+		} __sigsys;
+	} __si_fields;
+} siginfo_t;
+#define si_pid     __si_fields.__si_common.__first.__piduid.si_pid
+#define si_uid     __si_fields.__si_common.__first.__piduid.si_uid
+#define si_status  __si_fields.__si_common.__second.__sigchld.si_status
+#define si_utime   __si_fields.__si_common.__second.__sigchld.si_utime
+#define si_stime   __si_fields.__si_common.__second.__sigchld.si_stime
+#define si_value   __si_fields.__si_common.__second.si_value
+#define si_addr    __si_fields.__sigfault.si_addr
+#define si_addr_lsb __si_fields.__sigfault.si_addr_lsb
+#define si_lower   __si_fields.__sigfault.__first.__addr_bnd.si_lower
+#define si_upper   __si_fields.__sigfault.__first.__addr_bnd.si_upper
+#define si_pkey    __si_fields.__sigfault.__first.si_pkey
+#define si_band    __si_fields.__sigpoll.si_band
+#define si_fd      __si_fields.__sigpoll.si_fd
+#define si_timerid __si_fields.__si_common.__first.__timer.si_timerid
+#define si_overrun __si_fields.__si_common.__first.__timer.si_overrun
+#define si_ptr     si_value.sival_ptr
+#define si_int     si_value.sival_int
+#define si_call_addr __si_fields.__sigsys.si_call_addr
+#define si_syscall __si_fields.__sigsys.si_syscall
+#define si_arch    __si_fields.__sigsys.si_arch
+
+// Required for sys_sigaction sysdep.
+#define SA_NOCLDSTOP 1
+#define SA_NOCLDWAIT 2
+#define SA_SIGINFO 4
+#define SA_ONSTACK 0x08000000
+#define SA_RESTART 0x10000000
+#define SA_NODEFER 0x40000000
+#define SA_RESETHAND 0x80000000
+#define SA_RESTORER 0x04000000
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define SIG_ERR ((__sighandler)(void *)(-1))
+#define SIG_DFL ((__sighandler)(void *)(0))
+#define SIG_IGN ((__sighandler)(void *)(1))
+
+#define SIGABRT 6
+#define SIGFPE 8
+#define SIGILL 4
+#define SIGINT 2
+#define SIGSEGV 11
+#define SIGTERM 15
+#define SIGPROF 27
+#define SIGIO 29
+#define SIGPWR 30
+#define SIGRTMIN 35
+#define SIGRTMAX 64
+
+// TODO: replace this by uint64_t
+typedef long sigset_t;
+
+// constants for sigprocmask()
+#define SIG_BLOCK 0
+#define SIG_UNBLOCK 1
+#define SIG_SETMASK 2
+
+#define SIGHUP    1
+#define SIGQUIT   3
+#define SIGTRAP   5
+#define SIGIOT    SIGABRT
+#define SIGBUS    7
+#define SIGKILL   9
+#define SIGUSR1   10
+#define SIGUSR2   12
+#define SIGPIPE   13
+#define SIGALRM   14
+#define SIGSTKFLT 16
+#define SIGCHLD   17
+#define SIGCONT   18
+#define SIGSTOP   19
+#define SIGTSTP   20
+#define SIGTTIN   21
+#define SIGTTOU   22
+#define SIGURG    23
+#define SIGXCPU   24
+#define SIGXFSZ   25
+#define SIGVTALRM 26
+#define SIGWINCH  28
+#define SIGPOLL   29
+#define SIGSYS    31
+#define SIGUNUSED SIGSYS
+#define SIGCANCEL 32
+
+#define MINSIGSTKSZ 2048
+#define SIGSTKSZ 8192
+#define SS_ONSTACK 1
+#define SS_DISABLE 2
+
+typedef struct __stack {
+	void *ss_sp;
+	int ss_flags;
+	size_t ss_size;
+} stack_t;
+
+// constants for sigev_notify of struct sigevent
+#define SIGEV_SIGNAL 0
+#define SIGEV_NONE 1
+#define SIGEV_THREAD 2
+
+#define SEGV_MAPERR 1
+#define SEGV_ACCERR 2
+
+#define BUS_ADRALN 1
+
+#define ILL_ILLOPC 1
+#define ILL_ILLTRP 4
+#define ILL_PRVOPC 5
+
+#define NSIG 65
+
+#define SI_ASYNCNL (-60)
+#define SI_TKILL (-6)
+#define SI_SIGIO (-5)
+#define SI_ASYNCIO (-4)
+#define SI_MESGQ (-3)
+#define SI_TIMER (-2)
+#define SI_QUEUE (-1)
+#define SI_USER 0
+#define SI_KERNEL 128
+
+#define REG_R8 0
+#define REG_R9 1
+#define REG_R10 2
+#define REG_R11 3
+#define REG_R12 4
+#define REG_R13 5
+#define REG_R14 6
+#define REG_R15 7
+#define REG_RDI 8
+#define REG_RSI 9
+#define REG_RBP 10
+#define REG_RBX 11
+#define REG_RDX 12
+#define REG_RAX 13
+#define REG_RCX 14
+#define REG_RSP 15
+#define REG_RIP 16
+#define REG_EFL 17
+#define REG_CSGSFS 18
+#define REG_ERR 19
+#define REG_TRAPNO 20
+#define REG_OLDMASK 21
+#define REG_CR2 22
+#define NGREG 23
+
+struct sigevent {
+	union sigval sigev_value;
+	int sigev_notify;
+	int sigev_signo;
+	void (*sigev_notify_function)(union sigval);
+	// MISSING: sigev_notify_attributes
+};
+
+struct sigaction {
+	union {
+		void (*sa_handler)(int);
+		void (*sa_sigaction)(int, siginfo_t *, void *);
+	} __sa_handler;
+	sigset_t sa_mask;
+	int sa_flags;
+	void (*sa_restorer)(void);
+};
+#define sa_handler __sa_handler.sa_handler
+#define sa_sigaction __sa_handler.sa_sigaction
+
+// Taken from the linux kernel headers
+
+#if defined(__x86_64__)
+
+struct _fpreg {
+	unsigned short significand[4];
+	unsigned short exponent;
+};
+
+struct _fpxreg {
+	unsigned short significand[4];
+	unsigned short exponent;
+	unsigned short padding[3];
+};
+
+struct _xmmreg {
+	uint32_t element[4];
+};
+
+struct _fpstate {
+	uint16_t cwd;
+	uint16_t swd;
+	uint16_t ftw;
+	uint16_t fop;
+	uint64_t rip;
+	uint64_t rdp;
+	uint32_t mxcsr;
+	uint32_t mxcr_mask;
+	struct _fpxreg _st[8];
+	struct _xmmreg _xmm[16];
+	uint32_t padding[24];
+};
+
+typedef struct {
+	unsigned long gregs[NGREG];
+	struct _fpstate *fpregs;
+	unsigned long __reserved1[8];
+} mcontext_t;
+
+typedef struct __ucontext {
+	unsigned long uc_flags;
+	struct __ucontext *uc_link;
+	stack_t uc_stack;
+	mcontext_t uc_mcontext;
+	sigset_t uc_sigmask;
+} ucontext_t;
+
+#elif defined(__riscv) && __riscv_xlen == 64
+// Definitions from Linux kernel headers.
+
+struct __riscv_f_ext_state {
+	uint32_t f[32];
+	uint32_t fcsr;
+};
+
+struct __riscv_d_ext_state {
+	uint64_t f[32];
+	uint32_t fcsr;
+};
+
+struct __riscv_q_ext_state {
+	uint64_t f[64] __attribute__((aligned(16)));
+	uint32_t fcsr;
+	uint32_t reserved[3];
+};
+
+union __riscv_fp_state {
+	struct __riscv_f_ext_state f;
+	struct __riscv_d_ext_state d;
+	struct __riscv_q_ext_state q;
+};
+
+struct __user_regs_struct {
+	unsigned long pc;
+	unsigned long ra;
+	unsigned long sp;
+	unsigned long gp;
+	unsigned long tp;
+	unsigned long t0;
+	unsigned long t1;
+	unsigned long t2;
+	unsigned long s0;
+	unsigned long s1;
+	unsigned long a0;
+	unsigned long a1;
+	unsigned long a2;
+	unsigned long a3;
+	unsigned long a4;
+	unsigned long a5;
+	unsigned long a6;
+	unsigned long a7;
+	unsigned long s2;
+	unsigned long s3;
+	unsigned long s4;
+	unsigned long s5;
+	unsigned long s6;
+	unsigned long s7;
+	unsigned long s8;
+	unsigned long s9;
+	unsigned long s10;
+	unsigned long s11;
+	unsigned long t3;
+	unsigned long t4;
+	unsigned long t5;
+	unsigned long t6;
+};
+
+typedef struct __mcontext {
+	struct __user_regs_struct sc_regs;
+	union __riscv_fp_state sc_fpregs;
+} mcontext_t;
+
+typedef struct __ucontext {
+	unsigned long uc_flags;
+	struct ucontext	*uc_link;
+	stack_t uc_stack;
+	sigset_t uc_sigmask;
+	uint8_t  __unused[1024 / 8 - sizeof(sigset_t)];
+	mcontext_t uc_mcontext;
+} ucontext_t;
+
+#elif defined (__aarch64__)
+
+typedef struct sigcontext {
+	uint64_t fault_address;
+	uint64_t regs[31];
+	uint64_t sp;
+	uint64_t pc;
+	uint64_t pstate;
+	uint8_t __reserved[4096];
+} mcontext_t;
+
+#define FPSIMD_MAGIC 0x46508001
+#define ESR_MAGIC 0x45535201
+#define EXTRA_MAGIC 0x45585401
+#define SVE_MAGIC 0x53564501
+struct _aarch64_ctx {
+	uint32_t magic;
+	uint32_t size;
+};
+struct fpsimd_context {
+	struct _aarch64_ctx head;
+	uint32_t fpsr;
+	uint32_t fpcr;
+	__uint128_t vregs[32];
+};
+struct esr_context {
+	struct _aarch64_ctx head;
+	uint64_t esr;
+};
+struct extra_context {
+	struct _aarch64_ctx head;
+	uint64_t datap;
+	uint32_t size;
+	uint32_t __reserved[3];
+};
+struct sve_context {
+	struct _aarch64_ctx head;
+	uint16_t vl;
+	uint16_t __reserved[3];
+};
+#define SVE_VQ_BYTES		16
+#define SVE_VQ_MIN		1
+#define SVE_VQ_MAX		512
+#define SVE_VL_MIN		(SVE_VQ_MIN * SVE_VQ_BYTES)
+#define SVE_VL_MAX		(SVE_VQ_MAX * SVE_VQ_BYTES)
+#define SVE_NUM_ZREGS		32
+#define SVE_NUM_PREGS		16
+#define sve_vl_valid(vl) \
+	((vl) % SVE_VQ_BYTES == 0 && (vl) >= SVE_VL_MIN && (vl) <= SVE_VL_MAX)
+#define sve_vq_from_vl(vl)	((vl) / SVE_VQ_BYTES)
+#define sve_vl_from_vq(vq)	((vq) * SVE_VQ_BYTES)
+#define SVE_SIG_ZREG_SIZE(vq)	((unsigned)(vq) * SVE_VQ_BYTES)
+#define SVE_SIG_PREG_SIZE(vq)	((unsigned)(vq) * (SVE_VQ_BYTES / 8))
+#define SVE_SIG_FFR_SIZE(vq)	SVE_SIG_PREG_SIZE(vq)
+#define SVE_SIG_REGS_OFFSET					\
+	((sizeof(struct sve_context) + (SVE_VQ_BYTES - 1))	\
+		/ SVE_VQ_BYTES * SVE_VQ_BYTES)
+#define SVE_SIG_ZREGS_OFFSET	SVE_SIG_REGS_OFFSET
+#define SVE_SIG_ZREG_OFFSET(vq, n) \
+	(SVE_SIG_ZREGS_OFFSET + SVE_SIG_ZREG_SIZE(vq) * (n))
+#define SVE_SIG_ZREGS_SIZE(vq) \
+	(SVE_SIG_ZREG_OFFSET(vq, SVE_NUM_ZREGS) - SVE_SIG_ZREGS_OFFSET)
+#define SVE_SIG_PREGS_OFFSET(vq) \
+	(SVE_SIG_ZREGS_OFFSET + SVE_SIG_ZREGS_SIZE(vq))
+#define SVE_SIG_PREG_OFFSET(vq, n) \
+	(SVE_SIG_PREGS_OFFSET(vq) + SVE_SIG_PREG_SIZE(vq) * (n))
+#define SVE_SIG_PREGS_SIZE(vq) \
+	(SVE_SIG_PREG_OFFSET(vq, SVE_NUM_PREGS) - SVE_SIG_PREGS_OFFSET(vq))
+#define SVE_SIG_FFR_OFFSET(vq) \
+	(SVE_SIG_PREGS_OFFSET(vq) + SVE_SIG_PREGS_SIZE(vq))
+#define SVE_SIG_REGS_SIZE(vq) \
+	(SVE_SIG_FFR_OFFSET(vq) + SVE_SIG_FFR_SIZE(vq) - SVE_SIG_REGS_OFFSET)
+#define SVE_SIG_CONTEXT_SIZE(vq) (SVE_SIG_REGS_OFFSET + SVE_SIG_REGS_SIZE(vq))
+
+typedef struct __ucontext {
+	unsigned long uc_flags;
+	struct __ucontext *uc_link;
+	stack_t uc_stack;
+	sigset_t uc_sigmask;
+	mcontext_t uc_mcontext;
+} ucontext_t;
+
+#else
+#error "Missing architecture specific code."
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _ABIBITS_SIGNAL_H
diff --git a/sysdeps/atlas/include/abi-bits/socket.h b/sysdeps/atlas/include/abi-bits/socket.h
new file mode 100644
index 00000000..f3dc603f
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/socket.h
@@ -0,0 +1,298 @@
+#ifndef _ABIBITS_SOCKET_H
+#define _ABIBITS_SOCKET_H
+
+#include <stddef.h>
+#include <abi-bits/socklen_t.h>
+#include <bits/posix/iovec.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef unsigned short sa_family_t;
+
+struct msghdr {
+	void *msg_name;
+	socklen_t msg_namelen;
+	struct iovec *msg_iov;
+	size_t msg_iovlen; /* int in POSIX */
+	void *msg_control;
+	size_t msg_controllen; /* socklen_t in POSIX */
+	int msg_flags;
+};
+
+struct sockaddr_storage {
+	sa_family_t ss_family;
+	char __padding[128 - sizeof(sa_family_t)];
+};
+
+struct mmsghdr {
+	struct msghdr msg_hdr;
+	unsigned int  msg_len;
+};
+
+struct cmsghdr {
+	size_t cmsg_len; /* socklen_t in POSIX */
+	int cmsg_level;
+	int cmsg_type;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#define SCM_RIGHTS 1
+#define SCM_CREDENTIALS 2
+
+#define SHUT_RD 0
+#define SHUT_WR 1
+#define SHUT_RDWR 2
+
+#ifndef SOCK_STREAM
+#define SOCK_STREAM    1
+#define SOCK_DGRAM     2
+#endif
+
+#define SOCK_RAW       3
+#define SOCK_RDM       4
+#define SOCK_SEQPACKET 5
+#define SOCK_DCCP      6
+#define SOCK_PACKET    10
+
+#ifndef SOCK_CLOEXEC
+#define SOCK_CLOEXEC   02000000
+#define SOCK_NONBLOCK  04000
+#endif
+
+#define PF_UNSPEC       0
+#define PF_LOCAL        1
+#define PF_UNIX         PF_LOCAL
+#define PF_FILE         PF_LOCAL
+#define PF_INET         2
+#define PF_AX25         3
+#define PF_IPX          4
+#define PF_APPLETALK    5
+#define PF_NETROM       6
+#define PF_BRIDGE       7
+#define PF_ATMPVC       8
+#define PF_X25          9
+#define PF_INET6        10
+#define PF_ROSE         11
+#define PF_DECnet       12
+#define PF_NETBEUI      13
+#define PF_SECURITY     14
+#define PF_KEY          15
+#define PF_NETLINK      16
+#define PF_ROUTE        PF_NETLINK
+#define PF_PACKET       17
+#define PF_ASH          18
+#define PF_ECONET       19
+#define PF_ATMSVC       20
+#define PF_RDS          21
+#define PF_SNA          22
+#define PF_IRDA         23
+#define PF_PPPOX        24
+#define PF_WANPIPE      25
+#define PF_LLC          26
+#define PF_IB           27
+#define PF_MPLS         28
+#define PF_CAN          29
+#define PF_TIPC         30
+#define PF_BLUETOOTH    31
+#define PF_IUCV         32
+#define PF_RXRPC        33
+#define PF_ISDN         34
+#define PF_PHONET       35
+#define PF_IEEE802154   36
+#define PF_CAIF         37
+#define PF_ALG          38
+#define PF_NFC          39
+#define PF_VSOCK        40
+#define PF_KCM          41
+#define PF_QIPCRTR      42
+#define PF_SMC          43
+#define PF_XDP          44
+#define PF_MAX          45
+
+#define AF_UNSPEC       PF_UNSPEC
+#define AF_LOCAL        PF_LOCAL
+#define AF_UNIX         AF_LOCAL
+#define AF_FILE         AF_LOCAL
+#define AF_INET         PF_INET
+#define AF_AX25         PF_AX25
+#define AF_IPX          PF_IPX
+#define AF_APPLETALK    PF_APPLETALK
+#define AF_NETROM       PF_NETROM
+#define AF_BRIDGE       PF_BRIDGE
+#define AF_ATMPVC       PF_ATMPVC
+#define AF_X25          PF_X25
+#define AF_INET6        PF_INET6
+#define AF_ROSE         PF_ROSE
+#define AF_DECnet       PF_DECnet
+#define AF_NETBEUI      PF_NETBEUI
+#define AF_SECURITY     PF_SECURITY
+#define AF_KEY          PF_KEY
+#define AF_NETLINK      PF_NETLINK
+#define AF_ROUTE        PF_ROUTE
+#define AF_PACKET       PF_PACKET
+#define AF_ASH          PF_ASH
+#define AF_ECONET       PF_ECONET
+#define AF_ATMSVC       PF_ATMSVC
+#define AF_RDS          PF_RDS
+#define AF_SNA          PF_SNA
+#define AF_IRDA         PF_IRDA
+#define AF_PPPOX        PF_PPPOX
+#define AF_WANPIPE      PF_WANPIPE
+#define AF_LLC          PF_LLC
+#define AF_IB           PF_IB
+#define AF_MPLS         PF_MPLS
+#define AF_CAN          PF_CAN
+#define AF_TIPC         PF_TIPC
+#define AF_BLUETOOTH    PF_BLUETOOTH
+#define AF_IUCV         PF_IUCV
+#define AF_RXRPC        PF_RXRPC
+#define AF_ISDN         PF_ISDN
+#define AF_PHONET       PF_PHONET
+#define AF_IEEE802154   PF_IEEE802154
+#define AF_CAIF         PF_CAIF
+#define AF_ALG          PF_ALG
+#define AF_NFC          PF_NFC
+#define AF_VSOCK        PF_VSOCK
+#define AF_KCM          PF_KCM
+#define AF_QIPCRTR      PF_QIPCRTR
+#define AF_SMC          PF_SMC
+#define AF_XDP          PF_XDP
+#define AF_MAX          PF_MAX
+
+#define SO_REUSEADDR    2
+#define SO_TYPE         3
+#define SO_ERROR        4
+#define SO_DONTROUTE    5
+#define SO_BROADCAST    6
+#define SO_SNDBUF       7
+#define SO_RCVBUF       8
+#define SO_KEEPALIVE    9
+#define SO_OOBINLINE    10
+#define SO_NO_CHECK     11
+#define SO_PRIORITY     12
+#define SO_LINGER       13
+#define SO_BSDCOMPAT    14
+#define SO_REUSEPORT    15
+#define SO_PASSCRED     16
+#define SO_PEERCRED     17
+#define SO_RCVLOWAT     18
+#define SO_SNDLOWAT     19
+#define SO_ACCEPTCONN   30
+#define SO_PEERSEC      31
+#define SO_SNDBUFFORCE  32
+#define SO_RCVBUFFORCE  33
+#define SO_PROTOCOL     38
+#define SO_DOMAIN       39
+
+#define SO_RCVTIMEO     20
+#define SO_SNDTIMEO     21
+
+#define SO_TIMESTAMP    29
+#define SO_TIMESTAMPNS  35
+#define SO_TIMESTAMPING 37
+
+#define SO_SECURITY_AUTHENTICATION              22
+#define SO_SECURITY_ENCRYPTION_TRANSPORT        23
+#define SO_SECURITY_ENCRYPTION_NETWORK          24
+
+#define SO_BINDTODEVICE 25
+
+#define SO_ATTACH_FILTER        26
+#define SO_DETACH_FILTER        27
+#define SO_GET_FILTER           SO_ATTACH_FILTER
+
+#define SO_PEERNAME             28
+#define SCM_TIMESTAMP           SO_TIMESTAMP
+#define SO_PASSSEC              34
+#define SCM_TIMESTAMPNS         SO_TIMESTAMPNS
+#define SO_MARK                 36
+#define SCM_TIMESTAMPING        SO_TIMESTAMPING
+#define SO_RXQ_OVFL             40
+#define SO_WIFI_STATUS          41
+#define SCM_WIFI_STATUS         SO_WIFI_STATUS
+#define SO_PEEK_OFF             42
+#define SO_NOFCS                43
+#define SO_LOCK_FILTER          44
+#define SO_SELECT_ERR_QUEUE     45
+#define SO_BUSY_POLL            46
+#define SO_MAX_PACING_RATE      47
+#define SO_BPF_EXTENSIONS       48
+#define SO_INCOMING_CPU         49
+#define SO_ATTACH_BPF           50
+#define SO_DETACH_BPF           SO_DETACH_FILTER
+#define SO_ATTACH_REUSEPORT_CBPF 51
+#define SO_ATTACH_REUSEPORT_EBPF 52
+#define SO_CNX_ADVICE           53
+#define SCM_TIMESTAMPING_OPT_STATS 54
+#define SO_MEMINFO              55
+#define SO_INCOMING_NAPI_ID     56
+#define SO_COOKIE               57
+#define SCM_TIMESTAMPING_PKTINFO 58
+#define SO_PEERGROUPS           59
+#define SO_ZEROCOPY             60
+#define SO_TXTIME               61
+#define SCM_TXTIME              SO_TXTIME
+#define SO_BINDTOIFINDEX        62
+#define SO_DETACH_REUSEPORT_BPF 68
+
+#define SOL_SOCKET      1
+
+#define SOL_IP          0
+#define SOL_IPV6        41
+#define SOL_ICMPV6      58
+
+#define SOL_RAW         255
+#define SOL_DECNET      261
+#define SOL_X25         262
+#define SOL_PACKET      263
+#define SOL_ATM         264
+#define SOL_AAL         265
+#define SOL_IRDA        266
+#define SOL_NETBEUI     267
+#define SOL_LLC         268
+#define SOL_DCCP        269
+#define SOL_NETLINK     270
+#define SOL_TIPC        271
+#define SOL_RXRPC       272
+#define SOL_PPPOL2TP    273
+#define SOL_BLUETOOTH   274
+#define SOL_PNPIPE      275
+#define SOL_RDS         276
+#define SOL_IUCV        277
+#define SOL_CAIF        278
+#define SOL_ALG         279
+#define SOL_NFC         280
+#define SOL_KCM         281
+#define SOL_TLS         282
+#define SOL_XDP         283
+
+#define SOMAXCONN       128
+
+#define MSG_OOB       0x0001
+#define MSG_PEEK      0x0002
+#define MSG_DONTROUTE 0x0004
+#define MSG_CTRUNC    0x0008
+#define MSG_PROXY     0x0010
+#define MSG_TRUNC     0x0020
+#define MSG_DONTWAIT  0x0040
+#define MSG_EOR       0x0080
+#define MSG_WAITALL   0x0100
+#define MSG_FIN       0x0200
+#define MSG_SYN       0x0400
+#define MSG_CONFIRM   0x0800
+#define MSG_RST       0x1000
+#define MSG_ERRQUEUE  0x2000
+#define MSG_NOSIGNAL  0x4000
+#define MSG_MORE      0x8000
+#define MSG_WAITFORONE 0x10000
+#define MSG_BATCH     0x40000
+#define MSG_ZEROCOPY  0x4000000
+#define MSG_FASTOPEN  0x20000000
+#define MSG_CMSG_CLOEXEC 0x40000000
+
+#endif
diff --git a/sysdeps/atlas/include/abi-bits/socklen_t.h b/sysdeps/atlas/include/abi-bits/socklen_t.h
new file mode 100644
index 00000000..190e5f9f
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/socklen_t.h
@@ -0,0 +1,6 @@
+#ifndef _ABIBITS_SOCKLEN_T_H
+#define _ABIBITS_SOCKLEN_T_H
+
+typedef unsigned socklen_t;
+
+#endif /* _ABIBITS_SOCKLEN_T_H */
diff --git a/sysdeps/atlas/include/abi-bits/stat.h b/sysdeps/atlas/include/abi-bits/stat.h
new file mode 100644
index 00000000..3e9c9813
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/stat.h
@@ -0,0 +1,94 @@
+#ifndef _ABIBITS_STAT_H
+#define _ABIBITS_STAT_H
+
+#include <abi-bits/uid_t.h>
+#include <abi-bits/gid_t.h>
+#include <bits/off_t.h>
+#include <abi-bits/mode_t.h>
+#include <abi-bits/dev_t.h>
+#include <abi-bits/ino_t.h>
+#include <abi-bits/blksize_t.h>
+#include <abi-bits/blkcnt_t.h>
+#include <abi-bits/nlink_t.h>
+#include <bits/ansi/time_t.h>
+#include <bits/ansi/timespec.h>
+
+#define S_IFMT 0x0F000
+#define S_IFBLK 0x06000
+#define S_IFCHR 0x02000
+#define S_IFIFO 0x01000
+#define S_IFREG 0x08000
+#define S_IFDIR 0x04000
+#define S_IFLNK 0x0A000
+#define S_IFSOCK 0x0C000
+
+#define S_IRWXU 0700
+#define S_IRUSR 0400
+#define S_IWUSR 0200
+#define S_IXUSR 0100
+#define S_IEXEC S_IXUSR
+#define S_IRWXG 070
+#define S_IRGRP 040
+#define S_IWGRP 020
+#define S_IXGRP 010
+#define S_IRWXO 07
+#define S_IROTH 04
+#define S_IWOTH 02
+#define S_IXOTH 01
+#define S_ISUID 04000
+#define S_ISGID 02000
+#define S_ISVTX 01000
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#if defined(__x86_64__)
+
+struct stat {
+	dev_t st_dev;
+	ino_t st_ino;
+	nlink_t st_nlink;
+	mode_t st_mode;
+	uid_t st_uid;
+	gid_t st_gid;
+	unsigned int __pad0;
+	dev_t st_rdev;
+	off_t st_size;
+	blksize_t st_blksize;
+	blkcnt_t st_blocks;
+	struct timespec st_atim;
+	struct timespec st_mtim;
+	struct timespec st_ctim;
+	long __unused[3];
+};
+
+#elif (defined(__riscv) && __riscv_xlen == 64) || defined (__aarch64__)
+
+struct stat {
+	dev_t st_dev;
+	ino_t st_ino;
+	mode_t st_mode;
+	nlink_t st_nlink;
+	uid_t st_uid;
+	gid_t st_gid;
+	dev_t st_rdev;
+	unsigned long __pad1;
+	off_t st_size;
+	blksize_t st_blksize;
+	int __pad2;
+	blkcnt_t st_blocks;
+	struct timespec st_atim;
+	struct timespec st_mtim;
+	struct timespec st_ctim;
+	unsigned int __unused4;
+	unsigned int __unused5;
+};
+
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _ABIBITS_STAT_H
diff --git a/sysdeps/atlas/include/abi-bits/statfs.h b/sysdeps/atlas/include/abi-bits/statfs.h
new file mode 100644
index 00000000..60c977f6
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/statfs.h
@@ -0,0 +1,28 @@
+#ifndef _ABIBITS_STATFS_H
+#define _ABIBITS_STATFS_H
+
+#include <abi-bits/fsblkcnt_t.h>
+#include <abi-bits/fsfilcnt_t.h>
+
+typedef struct __mlibc_fsid {
+	int __val[2];
+} fsid_t;
+
+struct statfs {
+	unsigned long f_type;
+	unsigned long f_bsize;
+	fsblkcnt_t f_blocks;
+	fsblkcnt_t f_bfree;
+	fsblkcnt_t f_bavail;
+
+	fsfilcnt_t f_files;
+	fsfilcnt_t f_ffree;
+	fsid_t f_fsid;
+	unsigned long f_namelen;
+	unsigned long f_frsize;
+	unsigned long f_flags;
+	unsigned long __f_spare[4];
+};
+
+#endif /* _ABIBITS_STATFS_H */
+
diff --git a/sysdeps/atlas/include/abi-bits/statvfs.h b/sysdeps/atlas/include/abi-bits/statvfs.h
new file mode 100644
index 00000000..7742bad8
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/statvfs.h
@@ -0,0 +1,28 @@
+#ifndef _ABIBITS_STATVFS_H
+#define _ABIBITS_STATVFS_H
+
+#include <abi-bits/fsblkcnt_t.h>
+#include <abi-bits/fsfilcnt_t.h>
+
+#define ST_RDONLY 1
+#define ST_NOSUID 2
+
+// On Linux, this struct is not directly used by the kernel.
+struct statvfs {
+	unsigned long f_bsize;
+	unsigned long f_frsize;
+	fsblkcnt_t f_blocks;
+	fsblkcnt_t f_bfree;
+	fsblkcnt_t f_bavail;
+
+	fsfilcnt_t f_files;
+	fsfilcnt_t f_ffree;
+	fsfilcnt_t f_favail;
+
+	unsigned long f_fsid;
+	unsigned long f_flag;
+	unsigned long f_namemax;
+};
+
+#endif /* _ABIBITS_STATVFS_H */
+
diff --git a/sysdeps/atlas/include/abi-bits/suseconds_t.h b/sysdeps/atlas/include/abi-bits/suseconds_t.h
new file mode 100644
index 00000000..723ddfae
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/suseconds_t.h
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_SUSECONDS_T_H
+#define _ABIBITS_SUSECONDS_T_H
+
+#include <bits/types.h>
+
+typedef __mlibc_int64 suseconds_t;
+
+#endif /* _ABIBITS_SUSECONDS_T_H */
diff --git a/sysdeps/atlas/include/abi-bits/termios.h b/sysdeps/atlas/include/abi-bits/termios.h
new file mode 100644
index 00000000..fc563021
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/termios.h
@@ -0,0 +1,117 @@
+#ifndef _ABIBITS_TERMIOS_H
+#define _ABIBITS_TERMIOS_H
+
+typedef unsigned char cc_t;
+typedef unsigned int speed_t;
+typedef unsigned int tcflag_t;
+
+// indices for the c_cc array in struct termios
+#define NCCS     32
+#define VINTR    0
+#define VQUIT    1
+#define VERASE   2
+#define VKILL    3
+#define VEOF     4
+#define VTIME    5
+#define VMIN     6
+#define VSWTC    7
+#define VSTART   8
+#define VSTOP    9
+#define VSUSP    10
+#define VEOL     11
+#define VREPRINT 12
+#define VDISCARD 13
+#define VWERASE  14
+#define VLNEXT   15
+#define VEOL2    16
+
+// bitwise flags for c_iflag in struct termios
+#define BRKINT 0000002
+#define ICRNL 0000400
+#define IGNBRK 0000001
+#define IGNCR 0000200
+#define IGNPAR 0000004
+#define INLCR 0000100
+#define INPCK 0000020
+#define ISTRIP 0000040
+#define IXANY 0004000
+#define IXOFF 0010000
+#define IXON 0002000
+#define PARMRK 0000010
+
+// bitwise flags for c_oflag in struct termios
+#define OPOST 0000001
+#define ONLCR 0000004
+#define OCRNL 0000010
+#define ONOCR 0000020
+#define ONLRET 0000040
+#define OFDEL 0000200
+#define OFILL 0000100
+
+#define NLDLY 0000400
+#define NL0 0000000
+#define NL1 0000400
+
+#define CRDLY 0003000
+#define CR0 0000000
+#define CR1 0001000
+#define CR2 0002000
+#define CR3 0003000
+
+#define TABDLY 0014000
+#define TAB0 0000000
+#define TAB1 0004000
+#define TAB2 0010000
+#define TAB3 0014000
+
+#define XTABS 0014000
+#define BSDLY 0020000
+#define BS0 0000000
+#define BS1 0020000
+
+#define VTDLY 0040000
+#define VT0 0000000
+#define VT1 0040000
+
+#define FFDLY 0100000
+#define FF0 0000000
+#define FF1 0100000
+
+// bitwise constants for c_cflag in struct termios
+#define CSIZE 0000060
+#define CS5 0000000
+#define CS6 0000020
+#define CS7 0000040
+#define CS8 0000060
+
+#define CSTOPB 0000100
+#define CREAD 0000200
+#define PARENB 0000400
+#define PARODD 0001000
+#define HUPCL 0002000
+#define CLOCAL 0004000
+
+// bitwise constants for c_lflag in struct termios
+#define ECHO 0000010
+#define ECHOE 0000020
+#define ECHOK 0000040
+#define ECHONL 0000100
+#define ICANON 0000002
+#define IEXTEN 0100000
+#define ISIG 0000001
+#define NOFLSH 0000200
+#define TOSTOP 0000400
+#define ECHOPRT 0002000
+
+struct termios {
+	tcflag_t c_iflag;
+	tcflag_t c_oflag;
+	tcflag_t c_cflag;
+	tcflag_t c_lflag;
+	cc_t c_line;
+	cc_t c_cc[NCCS];
+	speed_t ibaud;
+	speed_t obaud;
+};
+
+#endif
diff --git a/sysdeps/atlas/include/abi-bits/time.h b/sysdeps/atlas/include/abi-bits/time.h
new file mode 100644
index 00000000..3f49db3c
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/time.h
@@ -0,0 +1,15 @@
+#ifndef _ABIBITS_TIME_H
+#define _ABIBITS_TIME_H
+
+#include <bits/posix/timeval.h>
+
+struct itimerval {
+	struct timeval it_interval;	/* Interval for periodic timer */
+	struct timeval it_value;	/* Time until next expiration */
+};
+
+#define ITIMER_REAL	0
+#define ITIMER_VIRTUAL	1
+#define ITIMER_PROF	2
+
+#endif // _ABIBITS_TIME_H
diff --git a/sysdeps/atlas/include/abi-bits/uid_t.h b/sysdeps/atlas/include/abi-bits/uid_t.h
new file mode 100644
index 00000000..aa184932
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/uid_t.h
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_UID_T_H
+#define _ABIBITS_UID_T_H
+
+typedef int uid_t;
+
+#endif // _ABIBITS_UID_T_H
+
diff --git a/sysdeps/atlas/include/abi-bits/utsname.h b/sysdeps/atlas/include/abi-bits/utsname.h
new file mode 100644
index 00000000..9875a46e
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/utsname.h
@@ -0,0 +1,13 @@
+#ifndef _ABIBITS_UTSNAME_T_H
+#define _ABIBITS_UTSNAME_T_H
+
+struct utsname {
+	char sysname[65];
+	char nodename[65];
+	char release[65];
+	char version[65];
+	char machine[65];
+	char domainname[65];
+};
+
+#endif // _ABIBITS_UTSNAME_T_H
diff --git a/sysdeps/atlas/include/abi-bits/vm-flags.h b/sysdeps/atlas/include/abi-bits/vm-flags.h
new file mode 100644
index 00000000..e7393bb2
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/vm-flags.h
@@ -0,0 +1,44 @@
+#ifndef _ABIBITS_VM_FLAGS_H
+#define _ABIBITS_VM_FLAGS_H
+
+#define PROT_NONE  0x00
+#define PROT_READ  0x01
+#define PROT_WRITE 0x02
+#define PROT_EXEC  0x04
+
+#define MAP_FAILED ((void *)(-1))
+#define MAP_FILE    0x00
+#define MAP_SHARED    0x01
+#define MAP_PRIVATE   0x02
+#define MAP_FIXED     0x10
+#define MAP_ANON      0x20
+#define MAP_ANONYMOUS 0x20
+#define MAP_NORESERVE 0x4000
+
+#define MS_ASYNC 0x01
+#define MS_INVALIDATE 0x02
+#define MS_SYNC 0x04
+
+#define MCL_CURRENT 0x01
+#define MCL_FUTURE 0x02
+
+#define POSIX_MADV_NORMAL 0
+#define POSIX_MADV_RANDOM 1
+#define POSIX_MADV_SEQUENTIAL 2
+#define POSIX_MADV_WILLNEED 3
+#define POSIX_MADV_DONTNEED 4
+
+#define MADV_NORMAL 0
+#define MADV_RANDOM 1
+#define MADV_SEQUENTIAL 2
+#define MADV_WILLNEED 3
+#define MADV_DONTNEED 4
+#define MADV_FREE 8
+
+#define MREMAP_MAYMOVE 1
+#define MREMAP_FIXED 2
+
+#define MFD_CLOEXEC 1U
+#define MFD_ALLOW_SEALING 2U
+
+#endif // _ABIBITS_VM_FLAGS_H
diff --git a/sysdeps/atlas/include/abi-bits/vt.h b/sysdeps/atlas/include/abi-bits/vt.h
new file mode 100644
index 00000000..811933b6
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/vt.h
@@ -0,0 +1,76 @@
+#ifndef _ABIBITS_VT_H
+#define _ABIBITS_VT_H
+
+#define MIN_NR_CONSOLES 1
+#define MAX_NR_CONSOLES 63
+
+#define VT_OPENQRY 0x5600
+#define VT_GETMODE 0x5601
+#define VT_SETMODE 0x5602
+#define VT_GETSTATE 0x5603
+#define VT_SENDSIG 0x5604
+#define VT_RELDISP 0x5605
+#define VT_ACTIVATE 0x5606
+#define VT_WAITACTIVE 0x5607
+#define VT_DISALLOCATE 0x5608
+#define VT_RESIZE 0x5609
+#define VT_RESIZEX 0x560A
+#define VT_LOCKSWITCH 0x560B
+#define VT_UNLOCKSWITCH 0x560C
+#define VT_GETHIFONTMASK 0x560D
+#define VT_WAITEVENT 0x560E
+#define VT_SETACTIVATE 0x560F
+
+struct vt_mode {
+  char mode;
+  char waitv;
+  short relsig;
+  short acqsig;
+  short frsig;
+};
+
+#define VT_AUTO 0x00
+#define VT_PROCESS 0x01
+#define VT_ACKACQ 0x02
+
+struct vt_stat {
+  unsigned short v_active;
+  unsigned short v_signal;
+  unsigned short v_state;
+};
+
+struct vt_sizes {
+  unsigned short v_rows;
+  unsigned short v_cols;
+  unsigned short v_scrollsize;
+};
+
+struct vt_consize {
+  unsigned short v_rows;
+  unsigned short v_cols;
+  unsigned short v_vlin;
+  unsigned short v_clin;
+  unsigned short v_vcol;
+  unsigned short v_ccol;
+};
+
+#define VT_EVENT_SWITCH 0x0001
+#define VT_EVENT_BLANK 0x0002
+#define VT_EVENT_UNBLANK 0x0004
+#define VT_EVENT_RESIZE 0x0008
+#define VT_MAX_EVENT 0x000F
+
+struct vt_event {
+  unsigned int event;
+
+  unsigned int oldev;
+  unsigned int newev;
+  unsigned int pad[4];
+};
+
+struct vt_setactivate {
+  unsigned int console;
+  struct vt_mode mode;
+};
+
+#endif // _ABIBITS_VT_H
diff --git a/sysdeps/atlas/include/abi-bits/wait.h b/sysdeps/atlas/include/abi-bits/wait.h
new file mode 100644
index 00000000..58d14625
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/wait.h
@@ -0,0 +1,28 @@
+#ifndef _ABIBITS_WAIT_H
+#define _ABIBITS_WAIT_H
+
+#define WNOHANG 1
+#define WUNTRACED 2
+#define WSTOPPED 2
+#define WEXITED 4
+#define WCONTINUED 8
+#define WNOWAIT 0x01000000
+
+#define __WALL 0x40000000
+#define __WCLONE 0x80000000
+
+#define WCOREFLAG 0x80
+
+#define WEXITSTATUS(x) (((x) & 0xff00) >> 8)
+#define WTERMSIG(x) ((x) & 0x7f)
+#define WSTOPSIG(x) WEXITSTATUS(x)
+#define WIFEXITED(x) (WTERMSIG(x) == 0)
+#define WIFSIGNALED(x) (((signed char) (((x) & 0x7f) + 1) >> 1) > 0)
+#define WIFSTOPPED(x) (((x) & 0xff) == 0x7f)
+#define WIFCONTINUED(x) ((x) == 0xffff)
+#define WCOREDUMP(x) ((x) & WCOREFLAG)
+
+/* glibc extension, but also useful for kernels */
+#define W_EXITCODE(ret, sig) (((ret) << 8) | (sig))
+
+#endif //_ABIBITS_WAIT_H
diff --git a/sysdeps/atlas/include/abi-bits/xattr.h b/sysdeps/atlas/include/abi-bits/xattr.h
new file mode 100644
index 00000000..c0e7fbeb
--- /dev/null
+++ b/sysdeps/atlas/include/abi-bits/xattr.h
@@ -0,0 +1,21 @@
+#ifndef MLIBC_ABIS_LINUX_XATTR_H
+#define MLIBC_ABIS_LINUX_XATTR_H
+
+/* __USE_KERNEL_XATTR_DEFS is exported when XATTR_* are emitted, and
+ * __UAPI_DEF_XATTR is used to determine the behaviour of the
+ * <linux/xattr.h> header (through <linux/libc-compat.h>), if it's set
+ * to 1, the header exports xattr defines and __USE_KERNEL_XATTR_DEFS.
+ * This applies for pretty much all other defines in libc-compat.h
+ * AFAICT.
+ */
+#ifndef __USE_KERNEL_XATTR_DEFS
+enum {
+	XATTR_CREATE = 1,
+#define XATTR_CREATE XATTR_CREATE
+	XATTR_REPLACE = 2,
+#define XATTR_REPLACE XATTR_REPLACE
+};
+#	define __UAPI_DEF_XATTR 0
+#endif
+
+#endif /* MLIBC_ABIS_LINUX_XATTR_H */
diff --git a/sysdeps/atlas/include/header_list b/sysdeps/atlas/include/header_list
new file mode 100644
index 00000000..09ebc2a7
--- /dev/null
+++ b/sysdeps/atlas/include/header_list
@@ -0,0 +1,43 @@
+'include/abi-bits/access.h',
+'include/abi-bits/auxv.h',
+'include/abi-bits/blkcnt_t.h',
+'include/abi-bits/blksize_t.h',
+'include/abi-bits/clockid_t.h',
+'include/abi-bits/dev_t.h',
+'include/abi-bits/epoll.h',
+'include/abi-bits/errno.h',
+'include/abi-bits/fcntl.h',
+'include/abi-bits/fsblkcnt_t.h',
+'include/abi-bits/fsfilcnt_t.h',
+'include/abi-bits/gid_t.h',
+'include/abi-bits/in.h',
+'include/abi-bits/ino_t.h',
+'include/abi-bits/inotify.h',
+'include/abi-bits/ioctls.h',
+'include/abi-bits/limits.h',
+'include/abi-bits/mode_t.h',
+'include/abi-bits/mqueue.h',
+'include/abi-bits/nlink_t.h',
+'include/abi-bits/packet.h',
+'include/abi-bits/pid_t.h',
+'include/abi-bits/poll.h',
+'include/abi-bits/ptrace.h',
+'include/abi-bits/reboot.h',
+'include/abi-bits/resource.h',
+'include/abi-bits/seek-whence.h',
+'include/abi-bits/shm.h',
+'include/abi-bits/signal.h',
+'include/abi-bits/socket.h',
+'include/abi-bits/socklen_t.h',
+'include/abi-bits/stat.h',
+'include/abi-bits/statfs.h',
+'include/abi-bits/statvfs.h',
+'include/abi-bits/suseconds_t.h',
+'include/abi-bits/termios.h',
+'include/abi-bits/time.h',
+'include/abi-bits/uid_t.h',
+'include/abi-bits/utsname.h',
+'include/abi-bits/vm-flags.h',
+'include/abi-bits/vt.h',
+'include/abi-bits/wait.h',
+'include/abi-bits/xattr.h',
diff --git a/sysdeps/atlas/include/header_list2 b/sysdeps/atlas/include/header_list2
new file mode 100644
index 00000000..0ec0556a
--- /dev/null
+++ b/sysdeps/atlas/include/header_list2
@@ -0,0 +1,30 @@
+auxv.h
+seek-whence.h
+vm-flags.h
+errno.h
+fcntl.h
+in.h
+resource.h
+signal.h
+stat.h
+socket.h
+termios.h
+time.h
+blkcnt_t.h
+clockid_t.h
+blksize_t.h
+dev_t.h
+gid_t.h
+ino_t.h
+mode_t.h
+nlink_t.h
+pid_t.h
+uid_t.h
+access.h
+wait.h
+limits.h
+utsname.h
+ptrace.h
+poll.h
+epoll.h
+packet.h
diff --git a/sysdeps/atlas/include/mlibc/thread-entry.hpp b/sysdeps/atlas/include/mlibc/thread-entry.hpp
new file mode 100644
index 00000000..2dd88a64
--- /dev/null
+++ b/sysdeps/atlas/include/mlibc/thread-entry.hpp
@@ -0,0 +1,10 @@
+#pragma once
+
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_start_thread(void);
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb);
+
+namespace mlibc {
+	void *prepare_stack(void *entry, void *user_arg, void *tcb);
+}
diff --git a/sysdeps/atlas/include/syscall.h b/sysdeps/atlas/include/syscall.h
new file mode 100644
index 00000000..711acfb9
--- /dev/null
+++ b/sysdeps/atlas/include/syscall.h
@@ -0,0 +1,110 @@
+#define SYS_EXIT 0
+#define SYS_OPEN 1
+#define SYS_CLOSE 2
+#define SYS_READ 3
+#define SYS_WRITE 4
+#define SYS_LOG_LIBC 5
+#define SYS_VM_MAP 6
+#define SYS_SEEK 7
+#define SYS_TCB_SET 8
+#define SYS_IOCTL 9
+#define SYS_FORK 10
+#define SYS_WAIT 11
+#define SYS_STAT 12
+#define SYS_FSTAT 13
+#define SYS_GETPID 14
+#define SYS_DUP 15
+#define SYS_DUP2 16
+#define SYS_READDIR 17
+#define SYS_FCNTL 18
+#define SYS_POLL 19
+#define SYS_EXEC 20
+
+// ABI:
+// (output) ret -> rax, errno -> rbx
+// (input) arguments -> r8 - 15 (excluding r11)
+// call number -> rsi
+
+typedef struct {
+    int64_t ret;
+    uint64_t errno;
+} sysc_ret;
+
+#define SYSCALL_NA0(call)                                                      \
+    ({                                                                         \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call)                                               \
+                     : "rcx", "r11", "memory");                                \
+    });
+
+#define SYSCALL_NA1(call, arg0)                                                \
+    ({                                                                         \
+        register auto r8 asm("r8") = (arg0);                                   \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call), "r"(r8)                                      \
+                     : "rcx", "r11", "memory");                                \
+    });
+
+#define SYSCALL_NA2(call, arg0, arg1)                                          \
+    ({                                                                         \
+        register auto r8 asm("r8") = (arg0);                                   \
+        register auto r9 asm("r9") = (arg1);                                   \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call), "r"(r8), "r"(r9)                             \
+                     : "rcx", "r11", "memory");                                \
+    });
+
+#define SYSCALL_NA3(call, arg0, arg1, arg2)                                    \
+    ({                                                                         \
+        register auto r8 asm("r8") = (arg0);                                   \
+        register auto r9 asm("r9") = (arg1);                                   \
+        register auto r10 asm("r10") = (arg2);                                 \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call), "r"(r8), "r"(r9), "r"(r10)                   \
+                     : "rcx", "r11", "memory");                                \
+    });
+
+#define SYSCALL_NA4(call, arg0, arg1, arg2, arg3)                              \
+    ({                                                                         \
+        register auto r8 asm("r8") = (arg0);                                   \
+        register auto r9 asm("r9") = (arg1);                                   \
+        register auto r10 asm("r10") = (arg2);                                 \
+        register auto r12 asm("r12") = (arg3);                                 \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call), "r"(r8), "r"(r9), "r"(r10), "r"(r12)         \
+                     : "rcx", "r11", "memory");                                \
+    });
+
+#define SYSCALL_NA5(call, arg0, arg1, arg2, arg3, arg4)                        \
+    ({                                                                         \
+        register auto r8 asm("r8") = (arg0);                                   \
+        register auto r9 asm("r9") = (arg1);                                   \
+        register auto r10 asm("r10") = (arg2);                                 \
+        register auto r12 asm("r12") = (arg3);                                 \
+        register auto r13 asm("r13") = (arg4);                                 \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call), "r"(r8), "r"(r9), "r"(r10), "r"(r12),        \
+                       "r"(r13),                                               \
+                     : "rcx", "r11", "memory");                                \
+    });
+
+#define SYSCALL_NA6(call, arg0, arg1, arg2, arg3, arg4, arg5)                  \
+    ({                                                                         \
+        register auto r8 asm("r8") = (arg0);                                   \
+        register auto r9 asm("r9") = (arg1);                                   \
+        register auto r10 asm("r10") = (arg2);                                 \
+        register auto r12 asm("r12") = (arg3);                                 \
+        register auto r13 asm("r13") = (arg4);                                 \
+        register auto r14 asm("r14") = (arg5);                                 \
+        asm volatile("syscall"                                                 \
+                     : "=a"(ret.ret), "=b"(ret.errno)                          \
+                     : "S"(call), "r"(r8), "r"(r9), "r"(r10), "r"(r12),        \
+                       "r"(r13), "r"(r14)                                      \
+                     : "rcx", "r11", "memory");                                \
+    });
diff --git a/sysdeps/atlas/include/vfs.h b/sysdeps/atlas/include/vfs.h
new file mode 100644
index 00000000..ba870bff
--- /dev/null
+++ b/sysdeps/atlas/include/vfs.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include <stdint.h>
+
+#define VFS_FILE            0x01
+#define VFS_DIRECTORY       0x02
+#define VFS_CHARDEVICE      0x03
+#define VFS_BLOCKDEVICE     0x04
+#define VFS_PIPE            0x05
+#define VFS_SYMLINK         0x06
+#define VFS_MOUNTPOINT      0x08
+#define VFS_INVALID_FS      0x09
+
+
+#define name_max            128
+
+typedef struct vfs_node_stat  {
+    uint32_t type;
+    uint64_t inode;
+    uint64_t filesize;
+} __attribute__((packed)) VfsNodeStat;
+
+typedef struct  {
+    char name[name_max];
+    uint32_t ino;
+    uint32_t type;
+} __attribute__((packed)) DirectoryEntry; 
+
diff --git a/sysdeps/atlas/meson.build b/sysdeps/atlas/meson.build
new file mode 100644
index 00000000..61621087
--- /dev/null
+++ b/sysdeps/atlas/meson.build
@@ -0,0 +1,72 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+	'generic/thread.cpp',
+	'generic/thread_entry.S'
+)
+
+if not no_headers
+	install_headers(
+        'include/abi-bits/access.h',
+        'include/abi-bits/auxv.h',
+        'include/abi-bits/blkcnt_t.h',
+        'include/abi-bits/blksize_t.h',
+        'include/abi-bits/clockid_t.h',
+        'include/abi-bits/dev_t.h',
+        'include/abi-bits/epoll.h',
+        'include/abi-bits/errno.h',
+        'include/abi-bits/fcntl.h',
+        'include/abi-bits/fsblkcnt_t.h',
+        'include/abi-bits/fsfilcnt_t.h',
+        'include/abi-bits/gid_t.h',
+        'include/abi-bits/in.h',
+        'include/abi-bits/ino_t.h',
+        'include/abi-bits/inotify.h',
+        'include/abi-bits/ioctls.h',
+        'include/abi-bits/limits.h',
+        'include/abi-bits/mode_t.h',
+        'include/abi-bits/mqueue.h',
+        'include/abi-bits/nlink_t.h',
+        'include/abi-bits/packet.h',
+        'include/abi-bits/pid_t.h',
+        'include/abi-bits/poll.h',
+        'include/abi-bits/ptrace.h',
+        'include/abi-bits/reboot.h',
+        'include/abi-bits/resource.h',
+        'include/abi-bits/seek-whence.h',
+        'include/abi-bits/shm.h',
+        'include/abi-bits/signal.h',
+        'include/abi-bits/socket.h',
+        'include/abi-bits/socklen_t.h',
+        'include/abi-bits/stat.h',
+        'include/abi-bits/statfs.h',
+        'include/abi-bits/statvfs.h',
+        'include/abi-bits/suseconds_t.h',
+        'include/abi-bits/termios.h',
+        'include/abi-bits/time.h',
+        'include/abi-bits/uid_t.h',
+        'include/abi-bits/utsname.h',
+        'include/abi-bits/vm-flags.h',
+        'include/abi-bits/vt.h',
+        'include/abi-bits/wait.h',
+        'include/abi-bits/xattr.h',
+		subdir: 'abi-bits'
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-x86_64/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
-- 
2.34.1

